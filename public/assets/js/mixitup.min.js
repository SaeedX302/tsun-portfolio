/**!
 * MixItUp v3.3.1
 * A high-performance, dependency-free library for animated filtering, sorting and more
 * Build 94e0fbf6-cd0b-4987-b3c0-14b59b67b8a0
 *
 * @copyright Copyright 2014-2018 KunkaLabs Limited.
 * @author    KunkaLabs Limited.
 * @link      https://www.kunkalabs.com/mixitup/
 *
 * @license   Commercial use requires a commercial license.
 *            https://www.kunkalabs.com/mixitup/licenses/
 *
 *            Non-commercial use permitted under same terms as CC BY-NC 3.0 license.
 *            http://creativecommons.org/licenses/by-nc/3.0/
 */
(function (t) {
  "use strict";

  var e = null;
  var n = null;
  (function () {
    var e = ["webkit", "moz", "o", "ms"];
    var n = t.document.createElement("div");
    var a = -1;
    for (a = 0; a < e.length && !t.requestAnimationFrame; a++) {
      t.requestAnimationFrame = t[e[a] + "RequestAnimationFrame"];
    }
    if (typeof n.nextElementSibling == "undefined") {
      Object.defineProperty(t.Element.prototype, "nextElementSibling", {
        get: function () {
          for (var t = this.nextSibling; t;) {
            if (t.nodeType === 1) {
              return t;
            }
            t = t.nextSibling;
          }
          return null;
        }
      });
    }
    (function (t) {
      t.matches = t.matches || t.machesSelector || t.mozMatchesSelector || t.msMatchesSelector || t.oMatchesSelector || t.webkitMatchesSelector || function (t) {
        return Array.prototype.indexOf.call(this.parentElement.querySelectorAll(t), this) > -1;
      };
    })(t.Element.prototype);
    Object.keys ||= function () {
      var t = Object.prototype.hasOwnProperty;
      var e = false;
      var n = [];
      var a = -1;
      e = !{
        toString: null
      }.propertyIsEnumerable("toString");
      n = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"];
      a = n.length;
      return function (i) {
        var o = [];
        var r = "";
        var s = -1;
        if (typeof i != "object" && (typeof i != "function" || i === null)) {
          throw new TypeError("Object.keys called on non-object");
        }
        for (r in i) {
          if (t.call(i, r)) {
            o.push(r);
          }
        }
        if (e) {
          for (s = 0; s < a; s++) {
            if (t.call(i, n[s])) {
              o.push(n[s]);
            }
          }
        }
        return o;
      };
    }();
    Array.isArray ||= function (t) {
      return Object.prototype.toString.call(t) === "[object Array]";
    };
    if (typeof Object.create != "function") {
      Object.create = function (t) {
        function e() {}
        return function (n, a) {
          if (n !== Object(n) && n !== null) {
            throw TypeError("Argument must be an object, or null");
          }
          e.prototype = n || {};
          var i = new e();
          e.prototype = null;
          if (a !== t) {
            Object.defineProperties(i, a);
          }
          if (n === null) {
            i.__proto__ = null;
          }
          return i;
        };
      }();
    }
    String.prototype.trim ||= function () {
      return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    };
    Array.prototype.indexOf ||= function (t) {
      var e;
      var n;
      var a;
      var i;
      if (this === null) {
        throw new TypeError();
      }
      a = Object(this);
      i = a.length >>> 0;
      if (i === 0) {
        return -1;
      }
      e = 0;
      if (arguments.length > 1) {
        e = Number(arguments[1]);
        if (e !== e) {
          e = 0;
        } else if (e !== 0 && e !== Infinity && e !== -Infinity) {
          e = (e > 0 || -1) * Math.floor(Math.abs(e));
        }
      }
      if (e >= i) {
        return -1;
      }
      for (n = e >= 0 ? e : Math.max(i - Math.abs(e), 0); n < i; n++) {
        if (n in a && a[n] === t) {
          return n;
        }
      }
      return -1;
    };
    Function.prototype.bind ||= function (t) {
      var e;
      var n;
      var a;
      var i;
      if (typeof this != "function") {
        throw new TypeError();
      }
      e = Array.prototype.slice.call(arguments, 1);
      n = this;
      a = function () {};
      i = function () {
        return n.apply(this instanceof a ? this : t, e.concat(Array.prototype.slice.call(arguments)));
      };
      if (this.prototype) {
        a.prototype = this.prototype;
      }
      i.prototype = new a();
      return i;
    };
    t.Element.prototype.dispatchEvent ||= function (t) {
      try {
        return this.fireEvent("on" + t.type, t);
      } catch (e) {}
    };
  })();
  e = function (a, i, o) {
    var r = null;
    var s = false;
    var l = null;
    var c = null;
    var u = null;
    var f = null;
    var h = [];
    var d = "";
    var m = [];
    var g = -1;
    u = o || t.document;
    if (s = arguments[3]) {
      s = typeof s == "boolean";
    }
    if (typeof a == "string") {
      m = u.querySelectorAll(a);
    } else if (a && typeof a == "object" && n.isElement(a, u)) {
      m = [a];
    } else {
      if (!a || typeof a != "object" || !a.length) {
        throw new Error(e.messages.errorFactoryInvalidContainer());
      }
      m = a;
    }
    if (m.length < 1) {
      throw new Error(e.messages.errorFactoryContainerNotFound());
    }
    for (g = 0; (r = m[g]) && (!(g > 0) || s); g++) {
      if (r.id) {
        d = r.id;
      } else {
        d = "MixItUp" + n.randomHex();
        r.id = d;
      }
      if (e.instances[d] instanceof e.Mixer) {
        l = e.instances[d];
        if (!i || i && i.debug && i.debug.showWarnings !== false) {
          console.warn(e.messages.warningFactoryPreexistingInstance());
        }
      } else {
        l = new e.Mixer();
        l.attach(r, u, d, i);
        e.instances[d] = l;
      }
      c = new e.Facade(l);
      if (i && i.debug && i.debug.enable) {
        h.push(l);
      } else {
        h.push(c);
      }
    }
    return f = s ? new e.Collection(h) : h[0];
  };
  e.use = function (t) {
    e.Base.prototype.callActions.call(e, "beforeUse", arguments);
    if (typeof t == "function" && t.TYPE === "mixitup-extension") {
      if (typeof e.extensions[t.NAME] == "undefined") {
        t(e);
        e.extensions[t.NAME] = t;
      }
    } else if (t.fn && t.fn.jquery) {
      e.libraries.$ = t;
    }
    e.Base.prototype.callActions.call(e, "afterUse", arguments);
  };
  e.instances = {};
  e.extensions = {};
  e.libraries = {};
  n = {
    hasClass: function (t, e) {
      return !!t.className.match(new RegExp("(\\s|^)" + e + "(\\s|$)"));
    },
    addClass: function (t, e) {
      if (!this.hasClass(t, e)) {
        t.className += t.className ? " " + e : e;
      }
    },
    removeClass: function (t, e) {
      if (this.hasClass(t, e)) {
        var n = new RegExp("(\\s|^)" + e + "(\\s|$)");
        t.className = t.className.replace(n, " ").trim();
      }
    },
    extend: function (t, e, n, a) {
      var i = [];
      var o = "";
      var r = -1;
      n = n || false;
      a = a || false;
      try {
        if (Array.isArray(e)) {
          for (r = 0; r < e.length; r++) {
            i.push(r);
          }
        } else if (e) {
          i = Object.keys(e);
        }
        for (r = 0; r < i.length; r++) {
          o = i[r];
          if (!n || typeof e[o] != "object" || this.isElement(e[o])) {
            t[o] = e[o];
          } else if (Array.isArray(e[o])) {
            t[o] ||= [];
            this.extend(t[o], e[o], n, a);
          } else {
            t[o] ||= {};
            this.extend(t[o], e[o], n, a);
          }
        }
      } catch (s) {
        if (!a) {
          throw s;
        }
        this.handleExtendError(s, t);
      }
      return t;
    },
    handleExtendError: function (t, n) {
      var a = /property "?(\w*)"?[,:] object/i;
      var i = null;
      var o = "";
      var r = "";
      var s = "";
      var l = "";
      var c = "";
      var u = -1;
      var f = -1;
      if (t instanceof TypeError && (i = a.exec(t.message))) {
        o = i[1];
        for (c in n) {
          for (f = 0; f < o.length && o.charAt(f) === c.charAt(f);) {
            f++;
          }
          if (f > u) {
            u = f;
            l = c;
          }
        }
        if (u > 1) {
          s = e.messages.errorConfigInvalidPropertySuggestion({
            probableMatch: l
          });
        }
        r = e.messages.errorConfigInvalidProperty({
          erroneous: o,
          suggestion: s
        });
        throw new TypeError(r);
      }
      throw t;
    },
    template: function (t) {
      for (var e = /\${([\w]*)}/g, n = {}, a = null; a = e.exec(t);) {
        n[a[1]] = new RegExp("\\${" + a[1] + "}", "g");
      }
      return function (e) {
        var a = "";
        var i = t;
        e = e || {};
        for (a in n) {
          i = i.replace(n[a], typeof e[a] != "undefined" ? e[a] : "");
        }
        return i;
      };
    },
    on: function (e, n, a, i) {
      if (e) {
        if (e.addEventListener) {
          e.addEventListener(n, a, i);
        } else if (e.attachEvent) {
          e["e" + n + a] = a;
          e[n + a] = function () {
            e["e" + n + a](t.event);
          };
          e.attachEvent("on" + n, e[n + a]);
        }
      }
    },
    off: function (t, e, n) {
      if (t) {
        if (t.removeEventListener) {
          t.removeEventListener(e, n, false);
        } else if (t.detachEvent) {
          t.detachEvent("on" + e, t[e + n]);
          t[e + n] = null;
        }
      }
    },
    getCustomEvent: function (e, n, a) {
      var i = null;
      a = a || t.document;
      if (typeof t.CustomEvent == "function") {
        i = new t.CustomEvent(e, {
          detail: n,
          bubbles: true,
          cancelable: true
        });
      } else if (typeof a.createEvent == "function") {
        i = a.createEvent("CustomEvent");
        i.initCustomEvent(e, true, true, n);
      } else {
        i = a.createEventObject();
        i.type = e;
        i.returnValue = false;
        i.cancelBubble = false;
        i.detail = n;
      }
      return i;
    },
    getOriginalEvent: function (t) {
      if (t.touches && t.touches.length) {
        return t.touches[0];
      } else if (t.changedTouches && t.changedTouches.length) {
        return t.changedTouches[0];
      } else {
        return t;
      }
    },
    index: function (t, e) {
      var n = 0;
      while ((t = t.previousElementSibling) !== null) {
        if (!e || !!t.matches(e)) {
          ++n;
        }
      }
      return n;
    },
    camelCase: function (t) {
      return t.toLowerCase().replace(/([_-][a-z])/g, function (t) {
        return t.toUpperCase().replace(/[_-]/, "");
      });
    },
    pascalCase: function (t) {
      return (t = this.camelCase(t)).charAt(0).toUpperCase() + t.slice(1);
    },
    dashCase: function (t) {
      return t.replace(/([A-Z])/g, "-$1").replace(/^-/, "").toLowerCase();
    },
    isElement: function (e, n) {
      n = n || t.document;
      return !!t.HTMLElement && !!(e instanceof t.HTMLElement) || !!n.defaultView && !!n.defaultView.HTMLElement && !!(e instanceof n.defaultView.HTMLElement) || e !== null && e.nodeType === 1 && typeof e.nodeName == "string";
    },
    createElement: function (e, n) {
      var a = null;
      var i = null;
      n = n || t.document;
      a = n.createDocumentFragment();
      i = n.createElement("div");
      i.innerHTML = e.trim();
      while (i.firstChild) {
        a.appendChild(i.firstChild);
      }
      return a;
    },
    removeWhitespace: function (t) {
      var e;
      while (t && t.nodeName === "#text") {
        e = t;
        t = t.previousSibling;
        if (e.parentElement) {
          e.parentElement.removeChild(e);
        }
      }
    },
    isEqualArray: function (t, e) {
      var n = t.length;
      if (n !== e.length) {
        return false;
      }
      while (n--) {
        if (t[n] !== e[n]) {
          return false;
        }
      }
      return true;
    },
    deepEquals: function (t, e) {
      var n;
      if (typeof t == "object" && t && typeof e == "object" && e) {
        if (Object.keys(t).length !== Object.keys(e).length) {
          return false;
        }
        for (n in t) {
          if (!e.hasOwnProperty(n) || !this.deepEquals(t[n], e[n])) {
            return false;
          }
        }
      } else if (t !== e) {
        return false;
      }
      return true;
    },
    arrayShuffle: function (t) {
      var e = t.slice();
      var n = e.length;
      for (var a = n, i = -1, o = []; a--;) {
        i = ~~(Math.random() * n);
        o = e[a];
        e[a] = e[i];
        e[i] = o;
      }
      return e;
    },
    arrayFromList: function (t) {
      var e;
      var n;
      try {
        return Array.prototype.slice.call(t);
      } catch (a) {
        e = [];
        n = 0;
        for (; n < t.length; n++) {
          e.push(t[n]);
        }
        return e;
      }
    },
    debounce: function (t, e, n) {
      var a;
      return function () {
        var i = this;
        var o = arguments;
        var r = n && !a;
        var s = null;
        s = function () {
          a = null;
          if (!n) {
            t.apply(i, o);
          }
        };
        clearTimeout(a);
        a = setTimeout(s, e);
        if (r) {
          t.apply(i, o);
        }
      };
    },
    position: function (t) {
      for (var e = 0, n = 0, a = t; t;) {
        e -= t.scrollLeft;
        n -= t.scrollTop;
        if (t === a) {
          e += t.offsetLeft;
          n += t.offsetTop;
          a = t.offsetParent;
        }
        t = t.parentElement;
      }
      return {
        x: e,
        y: n
      };
    },
    getHypotenuse: function (t, e) {
      var n = t.x - e.x;
      var a = t.y - e.y;
      n = n < 0 ? n * -1 : n;
      a = a < 0 ? a * -1 : a;
      return Math.sqrt(Math.pow(n, 2) + Math.pow(a, 2));
    },
    getIntersectionRatio: function (t, e) {
      var n = t.width * t.height;
      var a = -1;
      var i = -1;
      var o = -1;
      var r = -1;
      a = Math.max(0, Math.min(t.left + t.width, e.left + e.width) - Math.max(t.left, e.left));
      i = Math.max(0, Math.min(t.top + t.height, e.top + e.height) - Math.max(t.top, e.top));
      o = i * a;
      return r = o / n;
    },
    closestParent: function (e, n, a, i) {
      var o = e.parentNode;
      i = i || t.document;
      if (a && e.matches(n)) {
        return e;
      }
      while (o && o != i.body) {
        if (o.matches && o.matches(n)) {
          return o;
        }
        if (!o.parentNode) {
          return null;
        }
        o = o.parentNode;
      }
      return null;
    },
    children: function (e, n, a) {
      var i = [];
      var o = "";
      a = a || t.doc;
      if (e) {
        if (!e.id) {
          o = "Temp" + this.randomHexKey();
          e.id = o;
        }
        i = a.querySelectorAll("#" + e.id + " > " + n);
        if (o) {
          e.removeAttribute("id");
        }
      }
      return i;
    },
    clean: function (t) {
      var e = [];
      var n = -1;
      for (n = 0; n < t.length; n++) {
        if (t[n] !== "") {
          e.push(t[n]);
        }
      }
      return e;
    },
    defer: function (n) {
      var a = null;
      var i = null;
      var o = null;
      i = new this.Deferred();
      if (e.features.has.promises) {
        i.promise = new Promise(function (t, e) {
          i.resolve = t;
          i.reject = e;
        });
      } else if ((o = t.jQuery || n.$) && typeof o.Deferred == "function") {
        a = o.Deferred();
        i.promise = a.promise();
        i.resolve = a.resolve;
        i.reject = a.reject;
      } else if (t.console) {
        console.warn(e.messages.warningNoPromiseImplementation());
      }
      return i;
    },
    all: function (n, a) {
      var i = null;
      if (e.features.has.promises) {
        return Promise.all(n);
      } else if ((i = t.jQuery || a.$) && typeof i.when == "function") {
        return i.when.apply(i, n).done(function () {
          return arguments;
        });
      } else {
        if (t.console) {
          console.warn(e.messages.warningNoPromiseImplementation());
        }
        return [];
      }
    },
    getPrefix: function (t, e, a) {
      var i = -1;
      var o = "";
      if (n.dashCase(e) in t.style) {
        return "";
      }
      for (i = 0; o = a[i]; i++) {
        if (o + e in t.style) {
          return o.toLowerCase();
        }
      }
      return "unsupported";
    },
    randomHex: function () {
      return ("00000" + (Math.random() * 16777216 << 0).toString(16)).substr(-6).toUpperCase();
    },
    getDocumentState: function (e) {
      e = typeof e.body == "object" ? e : t.document;
      return {
        scrollTop: t.pageYOffset,
        scrollLeft: t.pageXOffset,
        docHeight: e.documentElement.scrollHeight,
        docWidth: e.documentElement.scrollWidth,
        viewportHeight: e.documentElement.clientHeight,
        viewportWidth: e.documentElement.clientWidth
      };
    },
    bind: function (t, e) {
      return function () {
        return e.apply(t, arguments);
      };
    },
    isVisible: function (e) {
      var n = null;
      return !!e.offsetParent || (n = t.getComputedStyle(e), n.position === "fixed" && n.visibility !== "hidden" && n.opacity !== "0");
    },
    seal: function (t) {
      if (typeof Object.seal == "function") {
        Object.seal(t);
      }
    },
    freeze: function (t) {
      if (typeof Object.freeze == "function") {
        Object.freeze(t);
      }
    },
    compareVersions: function (t, e) {
      var n = t.split(".");
      var a = e.split(".");
      var i = -1;
      var o = -1;
      var r = -1;
      for (r = 0; r < n.length; r++) {
        i = parseInt(n[r].replace(/[^\d.]/g, ""));
        o = parseInt(a[r].replace(/[^\d.]/g, "") || 0);
        if (o < i) {
          return false;
        }
        if (o > i) {
          return true;
        }
      }
      return true;
    },
    Deferred: function () {
      this.promise = null;
      this.resolve = null;
      this.reject = null;
      this.id = n.randomHex();
    },
    isEmptyObject: function (t) {
      var e = "";
      if (typeof Object.keys == "function") {
        return Object.keys(t).length === 0;
      }
      for (e in t) {
        if (t.hasOwnProperty(e)) {
          return false;
        }
      }
      return true;
    },
    getClassname: function (t, e, n) {
      var a = "";
      a += t.block;
      if (a.length) {
        a += t.delineatorElement;
      }
      a += t["element" + this.pascalCase(e)];
      if (n) {
        if (a.length) {
          a += t.delineatorModifier;
        }
        return a += n;
      } else {
        return a;
      }
    },
    getProperty: function (t, e) {
      var n = e.split(".");
      var a = null;
      var i = "";
      var o = 0;
      if (!e) {
        return t;
      }
      for (a = function (t) {
        if (t) {
          return t[i];
        } else {
          return null;
        }
      }; o < n.length;) {
        i = n[o];
        t = a(t);
        o++;
      }
      if (typeof t != "undefined") {
        return t;
      } else {
        return null;
      }
    }
  };
  e.h = n;
  e.Base = function () {};
  e.Base.prototype = {
    constructor: e.Base,
    callActions: function (t, e) {
      var a = this;
      var i = a.constructor.actions[t];
      var o = "";
      if (i && !n.isEmptyObject(i)) {
        for (o in i) {
          i[o].apply(a, e);
        }
      }
    },
    callFilters: function (t, e, a) {
      var i = this;
      var o = i.constructor.filters[t];
      var r = e;
      var s = "";
      if (!o || n.isEmptyObject(o)) {
        return r;
      }
      a = a || [];
      for (s in o) {
        a = n.arrayFromList(a);
        a.unshift(r);
        r = o[s].apply(i, a);
      }
      return r;
    }
  };
  e.BaseStatic = function () {
    this.actions = {};
    this.filters = {};
    this.extend = function (t) {
      n.extend(this.prototype, t);
    };
    this.registerAction = function (t, e, n) {
      (this.actions[t] = this.actions[t] || {})[e] = n;
    };
    this.registerFilter = function (t, e, n) {
      (this.filters[t] = this.filters[t] || {})[e] = n;
    };
  };
  e.Features = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.boxSizingPrefix = "";
    this.transformPrefix = "";
    this.transitionPrefix = "";
    this.boxSizingPrefix = "";
    this.transformProp = "";
    this.transformRule = "";
    this.transitionProp = "";
    this.perspectiveProp = "";
    this.perspectiveOriginProp = "";
    this.has = new e.Has();
    this.canary = null;
    this.BOX_SIZING_PROP = "boxSizing";
    this.TRANSITION_PROP = "transition";
    this.TRANSFORM_PROP = "transform";
    this.PERSPECTIVE_PROP = "perspective";
    this.PERSPECTIVE_ORIGIN_PROP = "perspectiveOrigin";
    this.VENDORS = ["Webkit", "moz", "O", "ms"];
    this.TWEENABLE = ["opacity", "width", "height", "marginRight", "marginBottom", "x", "y", "scale", "translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ"];
    this.callActions("afterConstruct");
  };
  e.BaseStatic.call(e.Features);
  e.Features.prototype = Object.create(e.Base.prototype);
  n.extend(e.Features.prototype, {
    constructor: e.Features,
    init: function () {
      var t = this;
      t.callActions("beforeInit", arguments);
      t.canary = document.createElement("div");
      t.setPrefixes();
      t.runTests();
      t.callActions("beforeInit", arguments);
    },
    runTests: function () {
      var e = this;
      e.callActions("beforeRunTests", arguments);
      e.has.promises = typeof t.Promise == "function";
      e.has.transitions = e.transitionPrefix !== "unsupported";
      e.callActions("afterRunTests", arguments);
      n.freeze(e.has);
    },
    setPrefixes: function () {
      var t = this;
      t.callActions("beforeSetPrefixes", arguments);
      t.transitionPrefix = n.getPrefix(t.canary, "Transition", t.VENDORS);
      t.transformPrefix = n.getPrefix(t.canary, "Transform", t.VENDORS);
      t.boxSizingPrefix = n.getPrefix(t.canary, "BoxSizing", t.VENDORS);
      t.boxSizingProp = t.boxSizingPrefix ? t.boxSizingPrefix + n.pascalCase(t.BOX_SIZING_PROP) : t.BOX_SIZING_PROP;
      t.transitionProp = t.transitionPrefix ? t.transitionPrefix + n.pascalCase(t.TRANSITION_PROP) : t.TRANSITION_PROP;
      t.transformProp = t.transformPrefix ? t.transformPrefix + n.pascalCase(t.TRANSFORM_PROP) : t.TRANSFORM_PROP;
      t.transformRule = t.transformPrefix ? "-" + t.transformPrefix + "-" + t.TRANSFORM_PROP : t.TRANSFORM_PROP;
      t.perspectiveProp = t.transformPrefix ? t.transformPrefix + n.pascalCase(t.PERSPECTIVE_PROP) : t.PERSPECTIVE_PROP;
      t.perspectiveOriginProp = t.transformPrefix ? t.transformPrefix + n.pascalCase(t.PERSPECTIVE_ORIGIN_PROP) : t.PERSPECTIVE_ORIGIN_PROP;
      t.callActions("afterSetPrefixes", arguments);
    }
  });
  e.Has = function () {
    this.transitions = false;
    this.promises = false;
    n.seal(this);
  };
  e.features = new e.Features();
  e.features.init();
  e.ConfigAnimation = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.enable = true;
    this.effects = "fade scale";
    this.effectsIn = "";
    this.effectsOut = "";
    this.duration = 600;
    this.easing = "ease";
    this.applyPerspective = true;
    this.perspectiveDistance = "3000px";
    this.perspectiveOrigin = "50% 50%";
    this.queue = true;
    this.queueLimit = 3;
    this.animateResizeContainer = true;
    this.animateResizeTargets = false;
    this.staggerSequence = null;
    this.reverseOut = false;
    this.nudge = true;
    this.clampHeight = true;
    this.clampWidth = true;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.ConfigAnimation);
  e.ConfigAnimation.prototype = Object.create(e.Base.prototype);
  e.ConfigAnimation.prototype.constructor = e.ConfigAnimation;
  e.ConfigBehavior = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.liveSort = false;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.ConfigBehavior);
  e.ConfigBehavior.prototype = Object.create(e.Base.prototype);
  e.ConfigBehavior.prototype.constructor = e.ConfigBehavior;
  e.ConfigCallbacks = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.onMixStart = null;
    this.onMixBusy = null;
    this.onMixEnd = null;
    this.onMixFail = null;
    this.onMixClick = null;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.ConfigCallbacks);
  e.ConfigCallbacks.prototype = Object.create(e.Base.prototype);
  e.ConfigCallbacks.prototype.constructor = e.ConfigCallbacks;
  e.ConfigControls = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.enable = true;
    this.live = false;
    this.scope = "global";
    this.toggleLogic = "or";
    this.toggleDefault = "all";
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.ConfigControls);
  e.ConfigControls.prototype = Object.create(e.Base.prototype);
  e.ConfigControls.prototype.constructor = e.ConfigControls;
  e.ConfigClassNames = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.block = "mixitup";
    this.elementContainer = "container";
    this.elementFilter = "control";
    this.elementSort = "control";
    this.elementMultimix = "control";
    this.elementToggle = "control";
    this.modifierActive = "active";
    this.modifierDisabled = "disabled";
    this.modifierFailed = "failed";
    this.delineatorElement = "-";
    this.delineatorModifier = "-";
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.ConfigClassNames);
  e.ConfigClassNames.prototype = Object.create(e.Base.prototype);
  e.ConfigClassNames.prototype.constructor = e.ConfigClassNames;
  e.ConfigData = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.uidKey = "";
    this.dirtyCheck = false;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.ConfigData);
  e.ConfigData.prototype = Object.create(e.Base.prototype);
  e.ConfigData.prototype.constructor = e.ConfigData;
  e.ConfigDebug = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.enable = false;
    this.showWarnings = true;
    this.fauxAsync = false;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.ConfigDebug);
  e.ConfigDebug.prototype = Object.create(e.Base.prototype);
  e.ConfigDebug.prototype.constructor = e.ConfigDebug;
  e.ConfigLayout = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.allowNestedTargets = true;
    this.containerClassName = "";
    this.siblingBefore = null;
    this.siblingAfter = null;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.ConfigLayout);
  e.ConfigLayout.prototype = Object.create(e.Base.prototype);
  e.ConfigLayout.prototype.constructor = e.ConfigLayout;
  e.ConfigLoad = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.filter = "all";
    this.sort = "default:asc";
    this.dataset = null;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.ConfigLoad);
  e.ConfigLoad.prototype = Object.create(e.Base.prototype);
  e.ConfigLoad.prototype.constructor = e.ConfigLoad;
  e.ConfigSelectors = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.target = ".mix";
    this.control = "";
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.ConfigSelectors);
  e.ConfigSelectors.prototype = Object.create(e.Base.prototype);
  e.ConfigSelectors.prototype.constructor = e.ConfigSelectors;
  e.ConfigRender = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.target = null;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.ConfigRender);
  e.ConfigRender.prototype = Object.create(e.Base.prototype);
  e.ConfigRender.prototype.constructor = e.ConfigRender;
  e.ConfigTemplates = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.ConfigTemplates);
  e.ConfigTemplates.prototype = Object.create(e.Base.prototype);
  e.ConfigTemplates.prototype.constructor = e.ConfigTemplates;
  e.Config = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.animation = new e.ConfigAnimation();
    this.behavior = new e.ConfigBehavior();
    this.callbacks = new e.ConfigCallbacks();
    this.controls = new e.ConfigControls();
    this.classNames = new e.ConfigClassNames();
    this.data = new e.ConfigData();
    this.debug = new e.ConfigDebug();
    this.layout = new e.ConfigLayout();
    this.load = new e.ConfigLoad();
    this.selectors = new e.ConfigSelectors();
    this.render = new e.ConfigRender();
    this.templates = new e.ConfigTemplates();
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.Config);
  e.Config.prototype = Object.create(e.Base.prototype);
  e.Config.prototype.constructor = e.Config;
  e.MixerDom = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.document = null;
    this.body = null;
    this.container = null;
    this.parent = null;
    this.targets = [];
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.MixerDom);
  e.MixerDom.prototype = Object.create(e.Base.prototype);
  e.MixerDom.prototype.constructor = e.MixerDom;
  e.UiClassNames = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.base = "";
    this.active = "";
    this.disabled = "";
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.UiClassNames);
  e.UiClassNames.prototype = Object.create(e.Base.prototype);
  e.UiClassNames.prototype.constructor = e.UiClassNames;
  e.CommandDataset = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.dataset = null;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.CommandDataset);
  e.CommandDataset.prototype = Object.create(e.Base.prototype);
  e.CommandDataset.prototype.constructor = e.CommandDataset;
  e.CommandMultimix = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.filter = null;
    this.sort = null;
    this.insert = null;
    this.remove = null;
    this.changeLayout = null;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.CommandMultimix);
  e.CommandMultimix.prototype = Object.create(e.Base.prototype);
  e.CommandMultimix.prototype.constructor = e.CommandMultimix;
  e.CommandFilter = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.selector = "";
    this.collection = null;
    this.action = "show";
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.CommandFilter);
  e.CommandFilter.prototype = Object.create(e.Base.prototype);
  e.CommandFilter.prototype.constructor = e.CommandFilter;
  e.CommandSort = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.sortString = "";
    this.attribute = "";
    this.order = "asc";
    this.collection = null;
    this.next = null;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.CommandSort);
  e.CommandSort.prototype = Object.create(e.Base.prototype);
  e.CommandSort.prototype.constructor = e.CommandSort;
  e.CommandInsert = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.index = 0;
    this.collection = [];
    this.position = "before";
    this.sibling = null;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.CommandInsert);
  e.CommandInsert.prototype = Object.create(e.Base.prototype);
  e.CommandInsert.prototype.constructor = e.CommandInsert;
  e.CommandRemove = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.targets = [];
    this.collection = [];
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.CommandRemove);
  e.CommandRemove.prototype = Object.create(e.Base.prototype);
  e.CommandRemove.prototype.constructor = e.CommandRemove;
  e.CommandChangeLayout = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.containerClassName = "";
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.CommandChangeLayout);
  e.CommandChangeLayout.prototype = Object.create(e.Base.prototype);
  e.CommandChangeLayout.prototype.constructor = e.CommandChangeLayout;
  e.ControlDefinition = function (t, a, i, o) {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.type = t;
    this.selector = a;
    this.live = i || false;
    this.parent = o || "";
    this.callActions("afterConstruct");
    n.freeze(this);
    n.seal(this);
  };
  e.BaseStatic.call(e.ControlDefinition);
  e.ControlDefinition.prototype = Object.create(e.Base.prototype);
  e.ControlDefinition.prototype.constructor = e.ControlDefinition;
  e.controlDefinitions = [];
  e.controlDefinitions.push(new e.ControlDefinition("multimix", "[data-filter][data-sort]"));
  e.controlDefinitions.push(new e.ControlDefinition("filter", "[data-filter]"));
  e.controlDefinitions.push(new e.ControlDefinition("sort", "[data-sort]"));
  e.controlDefinitions.push(new e.ControlDefinition("toggle", "[data-toggle]"));
  e.Control = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.el = null;
    this.selector = "";
    this.bound = [];
    this.pending = -1;
    this.type = "";
    this.status = "inactive";
    this.filter = "";
    this.sort = "";
    this.canDisable = false;
    this.handler = null;
    this.classNames = new e.UiClassNames();
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.Control);
  e.Control.prototype = Object.create(e.Base.prototype);
  n.extend(e.Control.prototype, {
    constructor: e.Control,
    init: function (t, n, a) {
      var i = this;
      this.callActions("beforeInit", arguments);
      i.el = t;
      i.type = n;
      i.selector = a;
      if (i.selector) {
        i.status = "live";
      } else {
        i.canDisable = typeof i.el.disable == "boolean";
        switch (i.type) {
          case "filter":
            i.filter = i.el.getAttribute("data-filter");
            break;
          case "toggle":
            i.filter = i.el.getAttribute("data-toggle");
            break;
          case "sort":
            i.sort = i.el.getAttribute("data-sort");
            break;
          case "multimix":
            i.filter = i.el.getAttribute("data-filter");
            i.sort = i.el.getAttribute("data-sort");
        }
      }
      i.bindClick();
      e.controls.push(i);
      this.callActions("afterInit", arguments);
    },
    isBound: function (t) {
      var e = this;
      var n = false;
      this.callActions("beforeIsBound", arguments);
      n = e.bound.indexOf(t) > -1;
      return e.callFilters("afterIsBound", n, arguments);
    },
    addBinding: function (t) {
      var e = this;
      this.callActions("beforeAddBinding", arguments);
      if (!e.isBound()) {
        e.bound.push(t);
      }
      this.callActions("afterAddBinding", arguments);
    },
    removeBinding: function (t) {
      var n = this;
      var a = -1;
      this.callActions("beforeRemoveBinding", arguments);
      if ((a = n.bound.indexOf(t)) > -1) {
        n.bound.splice(a, 1);
      }
      if (n.bound.length < 1) {
        n.unbindClick();
        a = e.controls.indexOf(n);
        e.controls.splice(a, 1);
        if (n.status === "active") {
          n.renderStatus(n.el, "inactive");
        }
      }
      this.callActions("afterRemoveBinding", arguments);
    },
    bindClick: function () {
      var t = this;
      this.callActions("beforeBindClick", arguments);
      t.handler = function (e) {
        t.handleClick(e);
      };
      n.on(t.el, "click", t.handler);
      this.callActions("afterBindClick", arguments);
    },
    unbindClick: function () {
      var t = this;
      this.callActions("beforeUnbindClick", arguments);
      n.off(t.el, "click", t.handler);
      t.handler = null;
      this.callActions("afterUnbindClick", arguments);
    },
    handleClick: function (t) {
      var a = this;
      var i = null;
      var o = null;
      var r = false;
      var s = undefined;
      var l = {};
      var c = null;
      var u = [];
      var f = -1;
      this.callActions("beforeHandleClick", arguments);
      this.pending = 0;
      o = a.bound[0];
      i = a.selector ? n.closestParent(t.target, o.config.selectors.control + a.selector, true, o.dom.document) : a.el;
      if (!i) {
        a.callActions("afterHandleClick", arguments);
        return;
      }
      switch (a.type) {
        case "filter":
          l.filter = a.filter || i.getAttribute("data-filter");
          break;
        case "sort":
          l.sort = a.sort || i.getAttribute("data-sort");
          break;
        case "multimix":
          l.filter = a.filter || i.getAttribute("data-filter");
          l.sort = a.sort || i.getAttribute("data-sort");
          break;
        case "toggle":
          l.filter = a.filter || i.getAttribute("data-toggle");
          r = a.status === "live" ? n.hasClass(i, a.classNames.active) : a.status === "active";
      }
      for (f = 0; f < a.bound.length; f++) {
        c = new e.CommandMultimix();
        n.extend(c, l);
        u.push(c);
      }
      u = a.callFilters("commandsHandleClick", u, arguments);
      a.pending = a.bound.length;
      f = 0;
      for (; o = a.bound[f]; f++) {
        l = u[f];
        if (l) {
          o.lastClicked ||= i;
          e.events.fire("mixClick", o.dom.container, {
            state: o.state,
            instance: o,
            originalEvent: t,
            control: o.lastClicked
          }, o.dom.document);
          if (typeof o.config.callbacks.onMixClick != "function" || !(s = o.config.callbacks.onMixClick.call(o.lastClicked, o.state, t, o), s === false)) {
            if (a.type === "toggle") {
              if (r) {
                o.toggleOff(l.filter);
              } else {
                o.toggleOn(l.filter);
              }
            } else {
              o.multimix(l);
            }
          }
        }
      }
      this.callActions("afterHandleClick", arguments);
    },
    update: function (t, n) {
      var a = this;
      var i = new e.CommandMultimix();
      a.callActions("beforeUpdate", arguments);
      a.pending--;
      a.pending = Math.max(0, a.pending);
      if (!(a.pending > 0)) {
        if (a.status === "live") {
          a.updateLive(t, n);
        } else {
          i.sort = a.sort;
          i.filter = a.filter;
          a.callFilters("actionsUpdate", i, arguments);
          a.parseStatusChange(a.el, t, i, n);
        }
        a.callActions("afterUpdate", arguments);
      }
    },
    updateLive: function (t, n) {
      var a = this;
      var i = null;
      var o = null;
      var r = null;
      var s = -1;
      a.callActions("beforeUpdateLive", arguments);
      if (a.el) {
        i = a.el.querySelectorAll(a.selector);
        s = 0;
        for (; r = i[s]; s++) {
          o = new e.CommandMultimix();
          switch (a.type) {
            case "filter":
              o.filter = r.getAttribute("data-filter");
              break;
            case "sort":
              o.sort = r.getAttribute("data-sort");
              break;
            case "multimix":
              o.filter = r.getAttribute("data-filter");
              o.sort = r.getAttribute("data-sort");
              break;
            case "toggle":
              o.filter = r.getAttribute("data-toggle");
          }
          o = a.callFilters("actionsUpdateLive", o, arguments);
          a.parseStatusChange(r, t, o, n);
        }
        a.callActions("afterUpdateLive", arguments);
      }
    },
    parseStatusChange: function (t, e, n, a) {
      var i = this;
      var o = "";
      var r = "";
      var s = -1;
      i.callActions("beforeParseStatusChange", arguments);
      switch (i.type) {
        case "filter":
          if (e.filter === n.filter) {
            i.renderStatus(t, "active");
          } else {
            i.renderStatus(t, "inactive");
          }
          break;
        case "multimix":
          if (e.sort === n.sort && e.filter === n.filter) {
            i.renderStatus(t, "active");
          } else {
            i.renderStatus(t, "inactive");
          }
          break;
        case "sort":
          if (e.sort.match(/:asc/g)) {
            o = e.sort.replace(/:asc/g, "");
          }
          if (e.sort === n.sort || o === n.sort) {
            i.renderStatus(t, "active");
          } else {
            i.renderStatus(t, "inactive");
          }
          break;
        case "toggle":
          if (a.length < 1) {
            i.renderStatus(t, "inactive");
          }
          if (e.filter === n.filter) {
            i.renderStatus(t, "active");
          }
          s = 0;
          for (; s < a.length; s++) {
            r = a[s];
            if (r === n.filter) {
              i.renderStatus(t, "active");
              break;
            }
            i.renderStatus(t, "inactive");
          }
      }
      i.callActions("afterParseStatusChange", arguments);
    },
    renderStatus: function (t, e) {
      var a = this;
      a.callActions("beforeRenderStatus", arguments);
      switch (e) {
        case "active":
          n.addClass(t, a.classNames.active);
          n.removeClass(t, a.classNames.disabled);
          if (a.canDisable) {
            a.el.disabled = false;
          }
          break;
        case "inactive":
          n.removeClass(t, a.classNames.active);
          n.removeClass(t, a.classNames.disabled);
          if (a.canDisable) {
            a.el.disabled = false;
          }
          break;
        case "disabled":
          if (a.canDisable) {
            a.el.disabled = true;
          }
          n.addClass(t, a.classNames.disabled);
          n.removeClass(t, a.classNames.active);
      }
      if (a.status !== "live") {
        a.status = e;
      }
      a.callActions("afterRenderStatus", arguments);
    }
  });
  e.controls = [];
  e.StyleData = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.x = 0;
    this.y = 0;
    this.top = 0;
    this.right = 0;
    this.bottom = 0;
    this.left = 0;
    this.width = 0;
    this.height = 0;
    this.marginRight = 0;
    this.marginBottom = 0;
    this.opacity = 0;
    this.scale = new e.TransformData();
    this.translateX = new e.TransformData();
    this.translateY = new e.TransformData();
    this.translateZ = new e.TransformData();
    this.rotateX = new e.TransformData();
    this.rotateY = new e.TransformData();
    this.rotateZ = new e.TransformData();
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.StyleData);
  e.StyleData.prototype = Object.create(e.Base.prototype);
  e.StyleData.prototype.constructor = e.StyleData;
  e.TransformData = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.value = 0;
    this.unit = "";
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.TransformData);
  e.TransformData.prototype = Object.create(e.Base.prototype);
  e.TransformData.prototype.constructor = e.TransformData;
  e.TransformDefaults = function () {
    e.StyleData.apply(this);
    this.callActions("beforeConstruct");
    this.scale.value = 0.01;
    this.scale.unit = "";
    this.translateX.value = 20;
    this.translateX.unit = "px";
    this.translateY.value = 20;
    this.translateY.unit = "px";
    this.translateZ.value = 20;
    this.translateZ.unit = "px";
    this.rotateX.value = 90;
    this.rotateX.unit = "deg";
    this.rotateY.value = 90;
    this.rotateY.unit = "deg";
    this.rotateX.value = 90;
    this.rotateX.unit = "deg";
    this.rotateZ.value = 180;
    this.rotateZ.unit = "deg";
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.TransformDefaults);
  e.TransformDefaults.prototype = Object.create(e.StyleData.prototype);
  e.TransformDefaults.prototype.constructor = e.TransformDefaults;
  e.transformDefaults = new e.TransformDefaults();
  e.EventDetail = function () {
    this.state = null;
    this.futureState = null;
    this.instance = null;
    this.originalEvent = null;
  };
  e.Events = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.mixStart = null;
    this.mixBusy = null;
    this.mixEnd = null;
    this.mixFail = null;
    this.mixClick = null;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.Events);
  e.Events.prototype = Object.create(e.Base.prototype);
  e.Events.prototype.constructor = e.Events;
  e.Events.prototype.fire = function (t, a, i, o) {
    var r = this;
    var s = null;
    var l = new e.EventDetail();
    r.callActions("beforeFire", arguments);
    if (typeof r[t] == "undefined") {
      throw new Error("Event type \"" + t + "\" not found.");
    }
    l.state = new e.State();
    n.extend(l.state, i.state);
    if (i.futureState) {
      l.futureState = new e.State();
      n.extend(l.futureState, i.futureState);
    }
    l.instance = i.instance;
    if (i.originalEvent) {
      l.originalEvent = i.originalEvent;
    }
    s = n.getCustomEvent(t, l, o);
    r.callFilters("eventFire", s, arguments);
    a.dispatchEvent(s);
  };
  e.events = new e.Events();
  e.QueueItem = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.args = [];
    this.instruction = null;
    this.triggerElement = null;
    this.deferred = null;
    this.isToggling = false;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.QueueItem);
  e.QueueItem.prototype = Object.create(e.Base.prototype);
  e.QueueItem.prototype.constructor = e.QueueItem;
  e.Mixer = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.config = new e.Config();
    this.id = "";
    this.isBusy = false;
    this.isToggling = false;
    this.incPadding = true;
    this.controls = [];
    this.targets = [];
    this.origOrder = [];
    this.cache = {};
    this.toggleArray = [];
    this.targetsMoved = 0;
    this.targetsImmovable = 0;
    this.targetsBound = 0;
    this.targetsDone = 0;
    this.staggerDuration = 0;
    this.effectsIn = null;
    this.effectsOut = null;
    this.transformIn = [];
    this.transformOut = [];
    this.queue = [];
    this.state = null;
    this.lastOperation = null;
    this.lastClicked = null;
    this.userCallback = null;
    this.userDeferred = null;
    this.dom = new e.MixerDom();
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.Mixer);
  e.Mixer.prototype = Object.create(e.Base.prototype);
  n.extend(e.Mixer.prototype, {
    constructor: e.Mixer,
    attach: function (a, i, o, r) {
      var s = this;
      var l = null;
      var c = -1;
      s.callActions("beforeAttach", arguments);
      s.id = o;
      if (r) {
        n.extend(s.config, r, true, true);
      }
      s.sanitizeConfig();
      s.cacheDom(a, i);
      if (s.config.layout.containerClassName) {
        n.addClass(s.dom.container, s.config.layout.containerClassName);
      }
      if (!e.features.has.transitions) {
        s.config.animation.enable = false;
      }
      if (typeof t.console == "undefined") {
        s.config.debug.showWarnings = false;
      }
      if (s.config.data.uidKey) {
        s.config.controls.enable = false;
      }
      s.indexTargets();
      s.state = s.getInitialState();
      c = 0;
      for (; l = s.lastOperation.toHide[c]; c++) {
        l.hide();
      }
      if (s.config.controls.enable) {
        s.initControls();
        s.buildToggleArray(null, s.state);
        s.updateControls({
          filter: s.state.activeFilter,
          sort: s.state.activeSort
        });
      }
      s.parseEffects();
      s.callActions("afterAttach", arguments);
    },
    sanitizeConfig: function () {
      var t = this;
      t.callActions("beforeSanitizeConfig", arguments);
      t.config.controls.scope = t.config.controls.scope.toLowerCase().trim();
      t.config.controls.toggleLogic = t.config.controls.toggleLogic.toLowerCase().trim();
      t.config.controls.toggleDefault = t.config.controls.toggleDefault.toLowerCase().trim();
      t.config.animation.effects = t.config.animation.effects.trim();
      t.callActions("afterSanitizeConfig", arguments);
    },
    getInitialState: function () {
      var t = this;
      var n = new e.State();
      var a = new e.Operation();
      t.callActions("beforeGetInitialState", arguments);
      n.activeContainerClassName = t.config.layout.containerClassName;
      if (t.config.load.dataset) {
        if (!t.config.data.uidKey || typeof t.config.data.uidKey != "string") {
          throw new TypeError(e.messages.errorConfigDataUidKeyNotSet());
        }
        a.startDataset = a.newDataset = n.activeDataset = t.config.load.dataset.slice();
        a.startContainerClassName = a.newContainerClassName = n.activeContainerClassName;
        a.show = t.targets.slice();
        n = t.callFilters("stateGetInitialState", n, arguments);
      } else {
        n.activeFilter = t.parseFilterArgs([t.config.load.filter]).command;
        n.activeSort = t.parseSortArgs([t.config.load.sort]).command;
        n.totalTargets = t.targets.length;
        n = t.callFilters("stateGetInitialState", n, arguments);
        if (n.activeSort.collection || n.activeSort.attribute || n.activeSort.order === "random" || n.activeSort.order === "desc") {
          a.newSort = n.activeSort;
          t.sortOperation(a);
          t.printSort(false, a);
          t.targets = a.newOrder;
        } else {
          a.startOrder = a.newOrder = t.targets;
        }
        a.startFilter = a.newFilter = n.activeFilter;
        a.startSort = a.newSort = n.activeSort;
        a.startContainerClassName = a.newContainerClassName = n.activeContainerClassName;
        if (a.newFilter.selector === "all") {
          a.newFilter.selector = t.config.selectors.target;
        } else if (a.newFilter.selector === "none") {
          a.newFilter.selector = "";
        }
      }
      a = t.callFilters("operationGetInitialState", a, [n]);
      t.lastOperation = a;
      if (a.newFilter) {
        t.filterOperation(a);
      }
      return n = t.buildState(a);
    },
    cacheDom: function (t, e) {
      var n = this;
      n.callActions("beforeCacheDom", arguments);
      n.dom.document = e;
      n.dom.body = n.dom.document.querySelector("body");
      n.dom.container = t;
      n.dom.parent = t;
      n.callActions("afterCacheDom", arguments);
    },
    indexTargets: function () {
      var t = this;
      var a = null;
      var i = null;
      var o = null;
      var r = -1;
      t.callActions("beforeIndexTargets", arguments);
      t.dom.targets = t.config.layout.allowNestedTargets ? t.dom.container.querySelectorAll(t.config.selectors.target) : n.children(t.dom.container, t.config.selectors.target, t.dom.document);
      t.dom.targets = n.arrayFromList(t.dom.targets);
      t.targets = [];
      if ((o = t.config.load.dataset) && o.length !== t.dom.targets.length) {
        throw new Error(e.messages.errorDatasetPrerenderedMismatch());
      }
      if (t.dom.targets.length) {
        for (r = 0; i = t.dom.targets[r]; r++) {
          a = new e.Target();
          a.init(i, t, o ? o[r] : undefined);
          a.isInDom = true;
          t.targets.push(a);
        }
        t.dom.parent = t.dom.targets[0].parentElement === t.dom.container ? t.dom.container : t.dom.targets[0].parentElement;
      }
      t.origOrder = t.targets;
      t.callActions("afterIndexTargets", arguments);
    },
    initControls: function () {
      var t = this;
      var n = "";
      var a = null;
      var i = null;
      var o = null;
      var r = null;
      var s = null;
      var l = -1;
      var c = -1;
      t.callActions("beforeInitControls", arguments);
      switch (t.config.controls.scope) {
        case "local":
          o = t.dom.container;
          break;
        case "global":
          o = t.dom.document;
          break;
        default:
          throw new Error(e.messages.errorConfigInvalidControlsScope());
      }
      for (l = 0; n = e.controlDefinitions[l]; l++) {
        if (t.config.controls.live || n.live) {
          if (n.parent) {
            r = t.dom[n.parent];
            if (!r || r.length < 0) {
              continue;
            }
            if (typeof r.length != "number") {
              r = [r];
            }
          } else {
            r = [o];
          }
          for (c = 0; i = r[c]; c++) {
            s = t.getControl(i, n.type, n.selector);
            t.controls.push(s);
          }
        } else {
          a = o.querySelectorAll(t.config.selectors.control + n.selector);
          c = 0;
          for (; i = a[c]; c++) {
            s = t.getControl(i, n.type, "");
            if (s) {
              t.controls.push(s);
            }
          }
        }
      }
      t.callActions("afterInitControls", arguments);
    },
    getControl: function (t, a, i) {
      var o = this;
      var r = null;
      var s = -1;
      o.callActions("beforeGetControl", arguments);
      if (!i) {
        for (s = 0; r = e.controls[s]; s++) {
          if (r.el === t && r.isBound(o)) {
            return o.callFilters("controlGetControl", null, arguments);
          }
          if (r.el === t && r.type === a && r.selector === i) {
            r.addBinding(o);
            return o.callFilters("controlGetControl", r, arguments);
          }
        }
      }
      r = new e.Control();
      r.init(t, a, i);
      r.classNames.base = n.getClassname(o.config.classNames, a);
      r.classNames.active = n.getClassname(o.config.classNames, a, o.config.classNames.modifierActive);
      r.classNames.disabled = n.getClassname(o.config.classNames, a, o.config.classNames.modifierDisabled);
      r.addBinding(o);
      return o.callFilters("controlGetControl", r, arguments);
    },
    getToggleSelector: function () {
      var t = this;
      var e = t.config.controls.toggleLogic === "or" ? ", " : "";
      var a = "";
      t.callActions("beforeGetToggleSelector", arguments);
      t.toggleArray = n.clean(t.toggleArray);
      a = t.toggleArray.join(e);
      if (a === "") {
        a = t.config.controls.toggleDefault;
      }
      return t.callFilters("selectorGetToggleSelector", a, arguments);
    },
    buildToggleArray: function (t, e) {
      var a = this;
      var i = "";
      a.callActions("beforeBuildToggleArray", arguments);
      if (t && t.filter) {
        i = t.filter.selector.replace(/\s/g, "");
      } else {
        if (!e) {
          return;
        }
        i = e.activeFilter.selector.replace(/\s/g, "");
      }
      if (i === a.config.selectors.target || i === "all") {
        i = "";
      }
      if (a.config.controls.toggleLogic === "or") {
        a.toggleArray = i.split(",");
      } else {
        a.toggleArray = a.splitCompoundSelector(i);
      }
      a.toggleArray = n.clean(a.toggleArray);
      a.callActions("afterBuildToggleArray", arguments);
    },
    splitCompoundSelector: function (t) {
      var e = t.split(/([\.\[])/g);
      var n = [];
      var a = "";
      var i = -1;
      if (e[0] === "") {
        e.shift();
      }
      i = 0;
      for (; i < e.length; i++) {
        if (i % 2 === 0) {
          a = "";
        }
        a += e[i];
        if (i % 2 !== 0) {
          n.push(a);
        }
      }
      return n;
    },
    updateControls: function (t) {
      var a = this;
      var i = null;
      var o = new e.CommandMultimix();
      var r = -1;
      a.callActions("beforeUpdateControls", arguments);
      if (t.filter) {
        o.filter = t.filter.selector;
      } else {
        o.filter = a.state.activeFilter.selector;
      }
      if (t.sort) {
        o.sort = a.buildSortString(t.sort);
      } else {
        o.sort = a.buildSortString(a.state.activeSort);
      }
      if (o.filter === a.config.selectors.target) {
        o.filter = "all";
      }
      if (o.filter === "") {
        o.filter = "none";
      }
      n.freeze(o);
      r = 0;
      for (; i = a.controls[r]; r++) {
        i.update(o, a.toggleArray);
      }
      a.callActions("afterUpdateControls", arguments);
    },
    buildSortString: function (t) {
      var e = this;
      var n = "";
      n += t.sortString;
      if (t.next) {
        n += " " + e.buildSortString(t.next);
      }
      return n;
    },
    insertTargets: function (t, a) {
      var i = this;
      var o = null;
      var r = -1;
      var s = null;
      var l = null;
      var c = null;
      var u = -1;
      i.callActions("beforeInsertTargets", arguments);
      if (typeof t.index == "undefined") {
        t.index = 0;
      }
      o = i.getNextSibling(t.index, t.sibling, t.position);
      s = i.dom.document.createDocumentFragment();
      r = o ? n.index(o, i.config.selectors.target) : i.targets.length;
      if (t.collection) {
        for (u = 0; c = t.collection[u]; u++) {
          if (i.dom.targets.indexOf(c) > -1) {
            throw new Error(e.messages.errorInsertPreexistingElement());
          }
          c.style.display = "none";
          s.appendChild(c);
          s.appendChild(i.dom.document.createTextNode(" "));
          if (n.isElement(c, i.dom.document) && c.matches(i.config.selectors.target)) {
            l = new e.Target();
            l.init(c, i);
            l.isInDom = true;
            i.targets.splice(r, 0, l);
            r++;
          }
        }
        i.dom.parent.insertBefore(s, o);
      }
      a.startOrder = i.origOrder = i.targets;
      i.callActions("afterInsertTargets", arguments);
    },
    getNextSibling: function (t, e, n) {
      var a = this;
      var i = null;
      t = Math.max(t, 0);
      if (e && n === "before") {
        i = e;
      } else if (e && n === "after") {
        i = e.nextElementSibling || null;
      } else if (a.targets.length > 0 && typeof t != "undefined") {
        i = t < a.targets.length || !a.targets.length ? a.targets[t].dom.el : a.targets[a.targets.length - 1].dom.el.nextElementSibling;
      } else if (a.targets.length === 0 && a.dom.parent.children.length > 0) {
        if (a.config.layout.siblingAfter) {
          i = a.config.layout.siblingAfter;
        } else if (a.config.layout.siblingBefore) {
          i = a.config.layout.siblingBefore.nextElementSibling;
        } else {
          a.dom.parent.children[0];
        }
      }
      return a.callFilters("elementGetNextSibling", i, arguments);
    },
    filterOperation: function (t) {
      var e = this;
      var n = false;
      var a = -1;
      var i = "";
      var o = null;
      var r = -1;
      e.callActions("beforeFilterOperation", arguments);
      i = t.newFilter.action;
      r = 0;
      for (; o = t.newOrder[r]; r++) {
        n = t.newFilter.collection ? t.newFilter.collection.indexOf(o.dom.el) > -1 : t.newFilter.selector !== "" && o.dom.el.matches(t.newFilter.selector);
        e.evaluateHideShow(n, o, i, t);
      }
      if (t.toRemove.length) {
        for (r = 0; o = t.show[r]; r++) {
          if (t.toRemove.indexOf(o) > -1) {
            t.show.splice(r, 1);
            if ((a = t.toShow.indexOf(o)) > -1) {
              t.toShow.splice(a, 1);
            }
            t.toHide.push(o);
            t.hide.push(o);
            r--;
          }
        }
      }
      t.matching = t.show.slice();
      if (t.show.length === 0 && t.newFilter.selector !== "" && e.targets.length !== 0) {
        t.hasFailed = true;
      }
      e.callActions("afterFilterOperation", arguments);
    },
    evaluateHideShow: function (t, e, n, a) {
      var i = this;
      var o = false;
      var r = Array.prototype.slice.call(arguments, 1);
      o = i.callFilters("testResultEvaluateHideShow", t, r);
      i.callActions("beforeEvaluateHideShow", arguments);
      if (o === true && n === "show" || o === false && n === "hide") {
        a.show.push(e);
        if (!e.isShown) {
          a.toShow.push(e);
        }
      } else {
        a.hide.push(e);
        if (e.isShown) {
          a.toHide.push(e);
        }
      }
      i.callActions("afterEvaluateHideShow", arguments);
    },
    sortOperation: function (t) {
      var a = this;
      var i = [];
      var o = null;
      var r = null;
      var s = -1;
      a.callActions("beforeSortOperation", arguments);
      t.startOrder = a.targets;
      if (t.newSort.collection) {
        i = [];
        s = 0;
        for (; r = t.newSort.collection[s]; s++) {
          if (a.dom.targets.indexOf(r) < 0) {
            throw new Error(e.messages.errorSortNonExistentElement());
          }
          o = new e.Target();
          o.init(r, a);
          o.isInDom = true;
          i.push(o);
        }
        t.newOrder = i;
      } else if (t.newSort.order === "random") {
        t.newOrder = n.arrayShuffle(t.startOrder);
      } else if (t.newSort.attribute === "") {
        t.newOrder = a.origOrder.slice();
        if (t.newSort.order === "desc") {
          t.newOrder.reverse();
        }
      } else {
        t.newOrder = t.startOrder.slice();
        t.newOrder.sort(function (e, n) {
          return a.compare(e, n, t.newSort);
        });
      }
      if (n.isEqualArray(t.newOrder, t.startOrder)) {
        t.willSort = false;
      }
      a.callActions("afterSortOperation", arguments);
    },
    compare: function (t, e, n) {
      var a = this;
      var i = n.order;
      var o = a.getAttributeValue(t, n.attribute);
      var r = a.getAttributeValue(e, n.attribute);
      if (isNaN(o * 1) || isNaN(r * 1)) {
        o = o.toLowerCase();
        r = r.toLowerCase();
      } else {
        o = o * 1;
        r = r * 1;
      }
      if (o < r) {
        if (i === "asc") {
          return -1;
        } else {
          return 1;
        }
      } else if (o > r) {
        if (i === "asc") {
          return 1;
        } else {
          return -1;
        }
      } else if (o === r && n.next) {
        return a.compare(t, e, n.next);
      } else {
        return 0;
      }
    },
    getAttributeValue: function (t, n) {
      var a = this;
      var i = "";
      i = t.dom.el.getAttribute("data-" + n);
      if (i === null && a.config.debug.showWarnings) {
        console.warn(e.messages.warningInconsistentSortingAttributes({
          attribute: "data-" + n
        }));
      }
      return a.callFilters("valueGetAttributeValue", i || 0, arguments);
    },
    printSort: function (e, a) {
      var i = this;
      var o = e ? a.newOrder : a.startOrder;
      var r = e ? a.startOrder : a.newOrder;
      var s = o.length ? o[o.length - 1].dom.el.nextElementSibling : null;
      var l = t.document.createDocumentFragment();
      var c = null;
      var u = null;
      var f = null;
      var h = -1;
      i.callActions("beforePrintSort", arguments);
      h = 0;
      for (; u = o[h]; h++) {
        f = u.dom.el;
        if (f.style.position !== "absolute") {
          n.removeWhitespace(f.previousSibling);
          f.parentElement.removeChild(f);
        }
      }
      c = s ? s.previousSibling : i.dom.parent.lastChild;
      if (c && c.nodeName === "#text") {
        n.removeWhitespace(c);
      }
      h = 0;
      for (; u = r[h]; h++) {
        f = u.dom.el;
        if (n.isElement(l.lastChild)) {
          l.appendChild(t.document.createTextNode(" "));
        }
        l.appendChild(f);
      }
      if (i.dom.parent.firstChild && i.dom.parent.firstChild !== s) {
        l.insertBefore(t.document.createTextNode(" "), l.childNodes[0]);
      }
      if (s) {
        l.appendChild(t.document.createTextNode(" "));
        i.dom.parent.insertBefore(l, s);
      } else {
        i.dom.parent.appendChild(l);
      }
      i.callActions("afterPrintSort", arguments);
    },
    parseSortString: function (t, a) {
      var i = this;
      var o = t.split(" ");
      var r = a;
      var s = [];
      var l = -1;
      for (l = 0; l < o.length; l++) {
        s = o[l].split(":");
        r.sortString = o[l];
        r.attribute = n.dashCase(s[0]);
        r.order = s[1] || "asc";
        switch (r.attribute) {
          case "default":
            r.attribute = "";
            break;
          case "random":
            r.attribute = "";
            r.order = "random";
        }
        if (!r.attribute || r.order === "random") {
          break;
        }
        if (l < o.length - 1) {
          r.next = new e.CommandSort();
          n.freeze(r);
          r = r.next;
        }
      }
      return i.callFilters("commandsParseSort", a, arguments);
    },
    parseEffects: function () {
      var t = this;
      var n = "";
      var a = t.config.animation.effectsIn || t.config.animation.effects;
      var i = t.config.animation.effectsOut || t.config.animation.effects;
      t.callActions("beforeParseEffects", arguments);
      t.effectsIn = new e.StyleData();
      t.effectsOut = new e.StyleData();
      t.transformIn = [];
      t.transformOut = [];
      t.effectsIn.opacity = t.effectsOut.opacity = 1;
      t.parseEffect("fade", a, t.effectsIn, t.transformIn);
      t.parseEffect("fade", i, t.effectsOut, t.transformOut, true);
      for (n in e.transformDefaults) {
        if (e.transformDefaults[n] instanceof e.TransformData) {
          t.parseEffect(n, a, t.effectsIn, t.transformIn);
          t.parseEffect(n, i, t.effectsOut, t.transformOut, true);
        }
      }
      t.parseEffect("stagger", a, t.effectsIn, t.transformIn);
      t.parseEffect("stagger", i, t.effectsOut, t.transformOut, true);
      t.callActions("afterParseEffects", arguments);
    },
    parseEffect: function (t, n, a, i, o) {
      var r = this;
      var s = /\(([^)]+)\)/;
      var l = -1;
      var c = "";
      var u = [];
      var f = "";
      var h = ["%", "px", "em", "rem", "vh", "vw", "deg"];
      var d = "";
      var m = -1;
      r.callActions("beforeParseEffect", arguments);
      if (typeof n != "string") {
        throw new TypeError(e.messages.errorConfigInvalidAnimationEffects());
      }
      if (n.indexOf(t) < 0) {
        if (t === "stagger") {
          r.staggerDuration = 0;
        }
        return;
      }
      l = n.indexOf(t + "(");
      if (l > -1) {
        c = n.substring(l);
        u = s.exec(c);
        f = u[1];
      }
      switch (t) {
        case "fade":
          a.opacity = f ? parseFloat(f) : 0;
          break;
        case "stagger":
          r.staggerDuration = f ? parseFloat(f) : 100;
          break;
        default:
          if (o && r.config.animation.reverseOut && t !== "scale") {
            a[t].value = (f ? parseFloat(f) : e.transformDefaults[t].value) * -1;
          } else {
            a[t].value = f ? parseFloat(f) : e.transformDefaults[t].value;
          }
          if (f) {
            for (m = 0; d = h[m]; m++) {
              if (f.indexOf(d) > -1) {
                a[t].unit = d;
                break;
              }
            }
          } else {
            a[t].unit = e.transformDefaults[t].unit;
          }
          i.push(t + "(" + a[t].value + a[t].unit + ")");
      }
      r.callActions("afterParseEffect", arguments);
    },
    buildState: function (t) {
      var n = this;
      var a = new e.State();
      var i = null;
      var o = -1;
      n.callActions("beforeBuildState", arguments);
      o = 0;
      for (; i = n.targets[o]; o++) {
        if (!t.toRemove.length || t.toRemove.indexOf(i) < 0) {
          a.targets.push(i.dom.el);
        }
      }
      for (o = 0; i = t.matching[o]; o++) {
        a.matching.push(i.dom.el);
      }
      for (o = 0; i = t.show[o]; o++) {
        a.show.push(i.dom.el);
      }
      for (o = 0; i = t.hide[o]; o++) {
        if (!t.toRemove.length || t.toRemove.indexOf(i) < 0) {
          a.hide.push(i.dom.el);
        }
      }
      a.id = n.id;
      a.container = n.dom.container;
      a.activeFilter = t.newFilter;
      a.activeSort = t.newSort;
      a.activeDataset = t.newDataset;
      a.activeContainerClassName = t.newContainerClassName;
      a.hasFailed = t.hasFailed;
      a.totalTargets = n.targets.length;
      a.totalShow = t.show.length;
      a.totalHide = t.hide.length;
      a.totalMatching = t.matching.length;
      a.triggerElement = t.triggerElement;
      return n.callFilters("stateBuildState", a, arguments);
    },
    goMix: function (a, i) {
      var o = this;
      var r = null;
      o.callActions("beforeGoMix", arguments);
      if (!o.config.animation.duration || !o.config.animation.effects || !n.isVisible(o.dom.container)) {
        a = false;
      }
      if (!i.toShow.length && !i.toHide.length && !i.willSort && !i.willChangeLayout) {
        a = false;
      }
      if (!i.startState.show.length && !i.show.length) {
        a = false;
      }
      e.events.fire("mixStart", o.dom.container, {
        state: i.startState,
        futureState: i.newState,
        instance: o
      }, o.dom.document);
      if (typeof o.config.callbacks.onMixStart == "function") {
        o.config.callbacks.onMixStart.call(o.dom.container, i.startState, i.newState, o);
      }
      n.removeClass(o.dom.container, n.getClassname(o.config.classNames, "container", o.config.classNames.modifierFailed));
      r = o.userDeferred ? o.userDeferred : o.userDeferred = n.defer(e.libraries);
      o.isBusy = true;
      if (a && e.features.has.transitions) {
        if (t.pageYOffset !== i.docState.scrollTop) {
          t.scrollTo(i.docState.scrollLeft, i.docState.scrollTop);
        }
        if (o.config.animation.applyPerspective) {
          o.dom.parent.style[e.features.perspectiveProp] = o.config.animation.perspectiveDistance;
          o.dom.parent.style[e.features.perspectiveOriginProp] = o.config.animation.perspectiveOrigin;
        }
        if (o.config.animation.animateResizeContainer && i.startHeight !== i.newHeight && i.viewportDeltaY !== i.startHeight - i.newHeight) {
          o.dom.parent.style.height = i.startHeight + "px";
        }
        if (o.config.animation.animateResizeContainer && i.startWidth !== i.newWidth && i.viewportDeltaX !== i.startWidth - i.newWidth) {
          o.dom.parent.style.width = i.startWidth + "px";
        }
        if (i.startHeight === i.newHeight) {
          o.dom.parent.style.height = i.startHeight + "px";
        }
        if (i.startWidth === i.newWidth) {
          o.dom.parent.style.width = i.startWidth + "px";
        }
        if (i.startHeight === i.newHeight && i.startWidth === i.newWidth) {
          o.dom.parent.style.overflow = "hidden";
        }
        requestAnimationFrame(function () {
          o.moveTargets(i);
        });
        return o.callFilters("promiseGoMix", r.promise, arguments);
      } else {
        if (o.config.debug.fauxAsync) {
          setTimeout(function () {
            o.cleanUp(i);
          }, o.config.animation.duration);
        } else {
          o.cleanUp(i);
        }
        return o.callFilters("promiseGoMix", r.promise, arguments);
      }
    },
    getStartMixData: function (n) {
      var a = this;
      var i = t.getComputedStyle(a.dom.parent);
      var o = a.dom.parent.getBoundingClientRect();
      var r = null;
      var s = {};
      var l = -1;
      var c = i[e.features.boxSizingProp];
      a.incPadding = c === "border-box";
      a.callActions("beforeGetStartMixData", arguments);
      l = 0;
      for (; r = n.show[l]; l++) {
        s = r.getPosData();
        n.showPosData[l] = {
          startPosData: s
        };
      }
      for (l = 0; r = n.toHide[l]; l++) {
        s = r.getPosData();
        n.toHidePosData[l] = {
          startPosData: s
        };
      }
      n.startX = o.left;
      n.startY = o.top;
      n.startHeight = a.incPadding ? o.height : o.height - parseFloat(i.paddingTop) - parseFloat(i.paddingBottom) - parseFloat(i.borderTop) - parseFloat(i.borderBottom);
      n.startWidth = a.incPadding ? o.width : o.width - parseFloat(i.paddingLeft) - parseFloat(i.paddingRight) - parseFloat(i.borderLeft) - parseFloat(i.borderRight);
      a.callActions("afterGetStartMixData", arguments);
    },
    setInter: function (t) {
      var e = this;
      var a = null;
      var i = -1;
      e.callActions("beforeSetInter", arguments);
      if (e.config.animation.clampHeight) {
        e.dom.parent.style.height = t.startHeight + "px";
        e.dom.parent.style.overflow = "hidden";
      }
      if (e.config.animation.clampWidth) {
        e.dom.parent.style.width = t.startWidth + "px";
        e.dom.parent.style.overflow = "hidden";
      }
      i = 0;
      for (; a = t.toShow[i]; i++) {
        a.show();
      }
      if (t.willChangeLayout) {
        n.removeClass(e.dom.container, t.startContainerClassName);
        n.addClass(e.dom.container, t.newContainerClassName);
      }
      e.callActions("afterSetInter", arguments);
    },
    getInterMixData: function (t) {
      var e = this;
      var n = null;
      var a = -1;
      e.callActions("beforeGetInterMixData", arguments);
      a = 0;
      for (; n = t.show[a]; a++) {
        t.showPosData[a].interPosData = n.getPosData();
      }
      for (a = 0; n = t.toHide[a]; a++) {
        t.toHidePosData[a].interPosData = n.getPosData();
      }
      e.callActions("afterGetInterMixData", arguments);
    },
    setFinal: function (t) {
      var e = this;
      var n = null;
      var a = -1;
      e.callActions("beforeSetFinal", arguments);
      if (t.willSort) {
        e.printSort(false, t);
      }
      a = 0;
      for (; n = t.toHide[a]; a++) {
        n.hide();
      }
      e.callActions("afterSetFinal", arguments);
    },
    getFinalMixData: function (e) {
      var a = this;
      var i = null;
      var o = null;
      var r = null;
      var s = -1;
      a.callActions("beforeGetFinalMixData", arguments);
      s = 0;
      for (; r = e.show[s]; s++) {
        e.showPosData[s].finalPosData = r.getPosData();
      }
      for (s = 0; r = e.toHide[s]; s++) {
        e.toHidePosData[s].finalPosData = r.getPosData();
      }
      if (a.config.animation.clampHeight || a.config.animation.clampWidth) {
        a.dom.parent.style.height = a.dom.parent.style.width = a.dom.parent.style.overflow = "";
      }
      if (!a.incPadding) {
        i = t.getComputedStyle(a.dom.parent);
      }
      o = a.dom.parent.getBoundingClientRect();
      e.newX = o.left;
      e.newY = o.top;
      e.newHeight = a.incPadding ? o.height : o.height - parseFloat(i.paddingTop) - parseFloat(i.paddingBottom) - parseFloat(i.borderTop) - parseFloat(i.borderBottom);
      e.newWidth = a.incPadding ? o.width : o.width - parseFloat(i.paddingLeft) - parseFloat(i.paddingRight) - parseFloat(i.borderLeft) - parseFloat(i.borderRight);
      e.viewportDeltaX = e.docState.viewportWidth - this.dom.document.documentElement.clientWidth;
      e.viewportDeltaY = e.docState.viewportHeight - this.dom.document.documentElement.clientHeight;
      if (e.willSort) {
        a.printSort(true, e);
      }
      s = 0;
      for (; r = e.toShow[s]; s++) {
        r.hide();
      }
      for (s = 0; r = e.toHide[s]; s++) {
        r.show();
      }
      if (e.willChangeLayout) {
        n.removeClass(a.dom.container, e.newContainerClassName);
        n.addClass(a.dom.container, a.config.layout.containerClassName);
      }
      a.callActions("afterGetFinalMixData", arguments);
    },
    getTweenData: function (t) {
      var n = this;
      var a = null;
      var i = null;
      var o = Object.getOwnPropertyNames(n.effectsIn);
      var r = "";
      var s = null;
      var l = -1;
      var c = -1;
      var u = -1;
      var f = -1;
      n.callActions("beforeGetTweenData", arguments);
      u = 0;
      for (; a = t.show[u]; u++) {
        i = t.showPosData[u];
        i.posIn = new e.StyleData();
        i.posOut = new e.StyleData();
        i.tweenData = new e.StyleData();
        if (a.isShown) {
          i.posIn.x = i.startPosData.x - i.interPosData.x;
          i.posIn.y = i.startPosData.y - i.interPosData.y;
        } else {
          i.posIn.x = i.posIn.y = 0;
        }
        i.posOut.x = i.finalPosData.x - i.interPosData.x;
        i.posOut.y = i.finalPosData.y - i.interPosData.y;
        i.posIn.opacity = a.isShown ? 1 : n.effectsIn.opacity;
        i.posOut.opacity = 1;
        i.tweenData.opacity = i.posOut.opacity - i.posIn.opacity;
        if (!a.isShown && !n.config.animation.nudge) {
          i.posIn.x = i.posOut.x;
          i.posIn.y = i.posOut.y;
        }
        i.tweenData.x = i.posOut.x - i.posIn.x;
        i.tweenData.y = i.posOut.y - i.posIn.y;
        if (n.config.animation.animateResizeTargets) {
          i.posIn.width = i.startPosData.width;
          i.posIn.height = i.startPosData.height;
          l = (i.startPosData.width || i.finalPosData.width) - i.interPosData.width;
          i.posIn.marginRight = i.startPosData.marginRight - l;
          c = (i.startPosData.height || i.finalPosData.height) - i.interPosData.height;
          i.posIn.marginBottom = i.startPosData.marginBottom - c;
          i.posOut.width = i.finalPosData.width;
          i.posOut.height = i.finalPosData.height;
          l = (i.finalPosData.width || i.startPosData.width) - i.interPosData.width;
          i.posOut.marginRight = i.finalPosData.marginRight - l;
          c = (i.finalPosData.height || i.startPosData.height) - i.interPosData.height;
          i.posOut.marginBottom = i.finalPosData.marginBottom - c;
          i.tweenData.width = i.posOut.width - i.posIn.width;
          i.tweenData.height = i.posOut.height - i.posIn.height;
          i.tweenData.marginRight = i.posOut.marginRight - i.posIn.marginRight;
          i.tweenData.marginBottom = i.posOut.marginBottom - i.posIn.marginBottom;
        }
        f = 0;
        for (; r = o[f]; f++) {
          s = n.effectsIn[r];
          if (s instanceof e.TransformData && s.value) {
            i.posIn[r].value = s.value;
            i.posOut[r].value = 0;
            i.tweenData[r].value = i.posOut[r].value - i.posIn[r].value;
            i.posIn[r].unit = i.posOut[r].unit = i.tweenData[r].unit = s.unit;
          }
        }
      }
      for (u = 0; a = t.toHide[u]; u++) {
        i = t.toHidePosData[u];
        i.posIn = new e.StyleData();
        i.posOut = new e.StyleData();
        i.tweenData = new e.StyleData();
        i.posIn.x = a.isShown ? i.startPosData.x - i.interPosData.x : 0;
        i.posIn.y = a.isShown ? i.startPosData.y - i.interPosData.y : 0;
        i.posOut.x = n.config.animation.nudge ? 0 : i.posIn.x;
        i.posOut.y = n.config.animation.nudge ? 0 : i.posIn.y;
        i.tweenData.x = i.posOut.x - i.posIn.x;
        i.tweenData.y = i.posOut.y - i.posIn.y;
        if (n.config.animation.animateResizeTargets) {
          i.posIn.width = i.startPosData.width;
          i.posIn.height = i.startPosData.height;
          l = i.startPosData.width - i.interPosData.width;
          i.posIn.marginRight = i.startPosData.marginRight - l;
          c = i.startPosData.height - i.interPosData.height;
          i.posIn.marginBottom = i.startPosData.marginBottom - c;
        }
        i.posIn.opacity = 1;
        i.posOut.opacity = n.effectsOut.opacity;
        i.tweenData.opacity = i.posOut.opacity - i.posIn.opacity;
        f = 0;
        for (; r = o[f]; f++) {
          s = n.effectsOut[r];
          if (s instanceof e.TransformData && s.value) {
            i.posIn[r].value = 0;
            i.posOut[r].value = s.value;
            i.tweenData[r].value = i.posOut[r].value - i.posIn[r].value;
            i.posIn[r].unit = i.posOut[r].unit = i.tweenData[r].unit = s.unit;
          }
        }
      }
      n.callActions("afterGetTweenData", arguments);
    },
    moveTargets: function (t) {
      var a = this;
      var i = null;
      var o = null;
      var r = null;
      var s = "";
      var l = false;
      var c = -1;
      var u = -1;
      var f = a.checkProgress.bind(a);
      a.callActions("beforeMoveTargets", arguments);
      u = 0;
      for (; i = t.show[u]; u++) {
        o = new e.IMoveData();
        r = t.showPosData[u];
        s = i.isShown ? "none" : "show";
        l = a.willTransition(s, t.hasEffect, r.posIn, r.posOut);
        if (l) {
          c++;
        }
        i.show();
        o.posIn = r.posIn;
        o.posOut = r.posOut;
        o.statusChange = s;
        o.staggerIndex = c;
        o.operation = t;
        o.callback = l ? f : null;
        i.move(o);
      }
      for (u = 0; i = t.toHide[u]; u++) {
        r = t.toHidePosData[u];
        o = new e.IMoveData();
        s = "hide";
        l = a.willTransition(s, r.posIn, r.posOut);
        o.posIn = r.posIn;
        o.posOut = r.posOut;
        o.statusChange = s;
        o.staggerIndex = u;
        o.operation = t;
        o.callback = l ? f : null;
        i.move(o);
      }
      if (a.config.animation.animateResizeContainer) {
        a.dom.parent.style[e.features.transitionProp] = "height " + a.config.animation.duration + "ms ease, width " + a.config.animation.duration + "ms ease ";
        requestAnimationFrame(function () {
          if (t.startHeight !== t.newHeight && t.viewportDeltaY !== t.startHeight - t.newHeight) {
            a.dom.parent.style.height = t.newHeight + "px";
          }
          if (t.startWidth !== t.newWidth && t.viewportDeltaX !== t.startWidth - t.newWidth) {
            a.dom.parent.style.width = t.newWidth + "px";
          }
        });
      }
      if (t.willChangeLayout) {
        n.removeClass(a.dom.container, a.config.layout.ContainerClassName);
        n.addClass(a.dom.container, t.newContainerClassName);
      }
      a.callActions("afterMoveTargets", arguments);
    },
    hasEffect: function () {
      var t = this;
      var e = ["scale", "translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ"];
      var n = "";
      var a = null;
      var i = false;
      var o = -1;
      var r = -1;
      if (t.effectsIn.opacity !== 1) {
        return t.callFilters("resultHasEffect", true, arguments);
      }
      for (r = 0; n = e[r]; r++) {
        a = t.effectsIn[n];
        o = a.value !== "undefined" ? a.value : a;
        if (o !== 0) {
          i = true;
          break;
        }
      }
      return t.callFilters("resultHasEffect", i, arguments);
    },
    willTransition: function (t, e, a, i) {
      var o = this;
      var r = false;
      r = !!n.isVisible(o.dom.container) && (t !== "none" && !!e || a.x !== i.x || a.y !== i.y || !!o.config.animation.animateResizeTargets && (a.width !== i.width || a.height !== i.height || a.marginRight !== i.marginRight || a.marginTop !== i.marginTop));
      return o.callFilters("resultWillTransition", r, arguments);
    },
    checkProgress: function (t) {
      var e = this;
      e.targetsDone++;
      if (e.targetsBound === e.targetsDone) {
        e.cleanUp(t);
      }
    },
    cleanUp: function (t) {
      var a = this;
      var i = null;
      var o = null;
      var r = null;
      var s = null;
      var l = -1;
      a.callActions("beforeCleanUp", arguments);
      a.targetsMoved = a.targetsImmovable = a.targetsBound = a.targetsDone = 0;
      l = 0;
      for (; i = t.show[l]; l++) {
        i.cleanUp();
        i.show();
      }
      for (l = 0; i = t.toHide[l]; l++) {
        i.cleanUp();
        i.hide();
      }
      if (t.willSort) {
        a.printSort(false, t);
      }
      a.dom.parent.style[e.features.transitionProp] = a.dom.parent.style.height = a.dom.parent.style.width = a.dom.parent.style.overflow = a.dom.parent.style[e.features.perspectiveProp] = a.dom.parent.style[e.features.perspectiveOriginProp] = "";
      if (t.willChangeLayout) {
        n.removeClass(a.dom.container, t.startContainerClassName);
        n.addClass(a.dom.container, t.newContainerClassName);
      }
      if (t.toRemove.length) {
        for (l = 0; i = a.targets[l]; l++) {
          if (t.toRemove.indexOf(i) > -1) {
            if ((o = i.dom.el.previousSibling) && o.nodeName === "#text" && (r = i.dom.el.nextSibling) && r.nodeName === "#text") {
              n.removeWhitespace(o);
            }
            if (!t.willSort) {
              a.dom.parent.removeChild(i.dom.el);
            }
            a.targets.splice(l, 1);
            i.isInDom = false;
            l--;
          }
        }
        a.origOrder = a.targets;
      }
      if (t.willSort) {
        a.targets = t.newOrder;
      }
      a.state = t.newState;
      a.lastOperation = t;
      a.dom.targets = a.state.targets;
      e.events.fire("mixEnd", a.dom.container, {
        state: a.state,
        instance: a
      }, a.dom.document);
      if (typeof a.config.callbacks.onMixEnd == "function") {
        a.config.callbacks.onMixEnd.call(a.dom.container, a.state, a);
      }
      if (t.hasFailed) {
        e.events.fire("mixFail", a.dom.container, {
          state: a.state,
          instance: a
        }, a.dom.document);
        if (typeof a.config.callbacks.onMixFail == "function") {
          a.config.callbacks.onMixFail.call(a.dom.container, a.state, a);
        }
        n.addClass(a.dom.container, n.getClassname(a.config.classNames, "container", a.config.classNames.modifierFailed));
      }
      if (typeof a.userCallback == "function") {
        a.userCallback.call(a.dom.container, a.state, a);
      }
      if (typeof a.userDeferred.resolve == "function") {
        a.userDeferred.resolve(a.state);
      }
      a.userCallback = null;
      a.userDeferred = null;
      a.lastClicked = null;
      a.isToggling = false;
      a.isBusy = false;
      if (a.queue.length) {
        a.callActions("beforeReadQueueCleanUp", arguments);
        s = a.queue.shift();
        a.userDeferred = s.deferred;
        a.isToggling = s.isToggling;
        a.lastClicked = s.triggerElement;
        if (s.instruction.command instanceof e.CommandMultimix) {
          a.multimix.apply(a, s.args);
        } else {
          a.dataset.apply(a, s.args);
        }
      }
      a.callActions("afterCleanUp", arguments);
    },
    parseMultimixArgs: function (t) {
      var a = this;
      var i = new e.UserInstruction();
      var o = null;
      var r = -1;
      i.animate = a.config.animation.enable;
      i.command = new e.CommandMultimix();
      r = 0;
      for (; r < t.length; r++) {
        o = t[r];
        if (o !== null) {
          if (typeof o == "object") {
            n.extend(i.command, o);
          } else if (typeof o == "boolean") {
            i.animate = o;
          } else if (typeof o == "function") {
            i.callback = o;
          }
        }
      }
      if (!!i.command.insert && !(i.command.insert instanceof e.CommandInsert)) {
        i.command.insert = a.parseInsertArgs([i.command.insert]).command;
      }
      if (!!i.command.remove && !(i.command.remove instanceof e.CommandRemove)) {
        i.command.remove = a.parseRemoveArgs([i.command.remove]).command;
      }
      if (!!i.command.filter && !(i.command.filter instanceof e.CommandFilter)) {
        i.command.filter = a.parseFilterArgs([i.command.filter]).command;
      }
      if (!!i.command.sort && !(i.command.sort instanceof e.CommandSort)) {
        i.command.sort = a.parseSortArgs([i.command.sort]).command;
      }
      if (!!i.command.changeLayout && !(i.command.changeLayout instanceof e.CommandChangeLayout)) {
        i.command.changeLayout = a.parseChangeLayoutArgs([i.command.changeLayout]).command;
      }
      i = a.callFilters("instructionParseMultimixArgs", i, arguments);
      n.freeze(i);
      return i;
    },
    parseFilterArgs: function (t) {
      var a = this;
      var i = new e.UserInstruction();
      var o = null;
      var r = -1;
      i.animate = a.config.animation.enable;
      i.command = new e.CommandFilter();
      r = 0;
      for (; r < t.length; r++) {
        o = t[r];
        if (typeof o == "string") {
          i.command.selector = o;
        } else if (o === null) {
          i.command.collection = [];
        } else if (typeof o == "object" && n.isElement(o, a.dom.document)) {
          i.command.collection = [o];
        } else if (typeof o == "object" && typeof o.length != "undefined") {
          i.command.collection = n.arrayFromList(o);
        } else if (typeof o == "object") {
          n.extend(i.command, o);
        } else if (typeof o == "boolean") {
          i.animate = o;
        } else if (typeof o == "function") {
          i.callback = o;
        }
      }
      if (i.command.selector && i.command.collection) {
        throw new Error(e.messages.errorFilterInvalidArguments());
      }
      i = a.callFilters("instructionParseFilterArgs", i, arguments);
      n.freeze(i);
      return i;
    },
    parseSortArgs: function (t) {
      var a = this;
      var i = new e.UserInstruction();
      var o = null;
      var r = "";
      var s = -1;
      i.animate = a.config.animation.enable;
      i.command = new e.CommandSort();
      s = 0;
      for (; s < t.length; s++) {
        o = t[s];
        if (o !== null) {
          switch (typeof o) {
            case "string":
              r = o;
              break;
            case "object":
              if (o.length) {
                i.command.collection = n.arrayFromList(o);
              }
              break;
            case "boolean":
              i.animate = o;
              break;
            case "function":
              i.callback = o;
          }
        }
      }
      if (r) {
        i.command = a.parseSortString(r, i.command);
      }
      i = a.callFilters("instructionParseSortArgs", i, arguments);
      n.freeze(i);
      return i;
    },
    parseInsertArgs: function (t) {
      var a = this;
      var i = new e.UserInstruction();
      var o = null;
      var r = -1;
      i.animate = a.config.animation.enable;
      i.command = new e.CommandInsert();
      r = 0;
      for (; r < t.length; r++) {
        o = t[r];
        if (o !== null) {
          if (typeof o == "number") {
            i.command.index = o;
          } else if (typeof o == "string" && ["before", "after"].indexOf(o) > -1) {
            i.command.position = o;
          } else if (typeof o == "string") {
            i.command.collection = n.arrayFromList(n.createElement(o).childNodes);
          } else if (typeof o == "object" && n.isElement(o, a.dom.document)) {
            if (i.command.collection.length) {
              i.command.sibling = o;
            } else {
              i.command.collection = [o];
            }
          } else if (typeof o == "object" && o.length) {
            if (i.command.collection.length) {
              i.command.sibling = o[0];
            } else {
              i.command.collection = o;
            }
          } else if (typeof o == "object" && o.childNodes && o.childNodes.length) {
            if (i.command.collection.length) {
              i.command.sibling = o.childNodes[0];
            } else {
              i.command.collection = n.arrayFromList(o.childNodes);
            }
          } else if (typeof o == "object") {
            n.extend(i.command, o);
          } else if (typeof o == "boolean") {
            i.animate = o;
          } else if (typeof o == "function") {
            i.callback = o;
          }
        }
      }
      if (i.command.index && i.command.sibling) {
        throw new Error(e.messages.errorInsertInvalidArguments());
      }
      if (!i.command.collection.length && a.config.debug.showWarnings) {
        console.warn(e.messages.warningInsertNoElements());
      }
      i = a.callFilters("instructionParseInsertArgs", i, arguments);
      n.freeze(i);
      return i;
    },
    parseRemoveArgs: function (t) {
      var a = this;
      var i = new e.UserInstruction();
      var o = null;
      var r = null;
      var s = -1;
      i.animate = a.config.animation.enable;
      i.command = new e.CommandRemove();
      s = 0;
      for (; s < t.length; s++) {
        r = t[s];
        if (r !== null) {
          switch (typeof r) {
            case "number":
              if (a.targets[r]) {
                i.command.targets[0] = a.targets[r];
              }
              break;
            case "string":
              i.command.collection = n.arrayFromList(a.dom.parent.querySelectorAll(r));
              break;
            case "object":
              if (r && r.length) {
                i.command.collection = r;
              } else if (n.isElement(r, a.dom.document)) {
                i.command.collection = [r];
              } else {
                n.extend(i.command, r);
              }
              break;
            case "boolean":
              i.animate = r;
              break;
            case "function":
              i.callback = r;
          }
        }
      }
      if (i.command.collection.length) {
        for (s = 0; o = a.targets[s]; s++) {
          if (i.command.collection.indexOf(o.dom.el) > -1) {
            i.command.targets.push(o);
          }
        }
      }
      if (!i.command.targets.length && a.config.debug.showWarnings) {
        console.warn(e.messages.warningRemoveNoElements());
      }
      n.freeze(i);
      return i;
    },
    parseDatasetArgs: function (t) {
      var a = this;
      var i = new e.UserInstruction();
      var o = null;
      var r = -1;
      i.animate = a.config.animation.enable;
      i.command = new e.CommandDataset();
      r = 0;
      for (; r < t.length; r++) {
        o = t[r];
        if (o !== null) {
          switch (typeof o) {
            case "object":
              if (Array.isArray(o) || typeof o.length == "number") {
                i.command.dataset = o;
              } else {
                n.extend(i.command, o);
              }
              break;
            case "boolean":
              i.animate = o;
              break;
            case "function":
              i.callback = o;
          }
        }
      }
      n.freeze(i);
      return i;
    },
    parseChangeLayoutArgs: function (t) {
      var a = this;
      var i = new e.UserInstruction();
      var o = null;
      var r = -1;
      i.animate = a.config.animation.enable;
      i.command = new e.CommandChangeLayout();
      r = 0;
      for (; r < t.length; r++) {
        o = t[r];
        if (o !== null) {
          switch (typeof o) {
            case "string":
              i.command.containerClassName = o;
              break;
            case "object":
              n.extend(i.command, o);
              break;
            case "boolean":
              i.animate = o;
              break;
            case "function":
              i.callback = o;
          }
        }
      }
      n.freeze(i);
      return i;
    },
    queueMix: function (t) {
      var a = this;
      var i = null;
      var o = "";
      a.callActions("beforeQueueMix", arguments);
      i = n.defer(e.libraries);
      if (a.config.animation.queue && a.queue.length < a.config.animation.queueLimit) {
        t.deferred = i;
        a.queue.push(t);
        if (a.config.controls.enable) {
          if (a.isToggling) {
            a.buildToggleArray(t.instruction.command);
            o = a.getToggleSelector();
            a.updateControls({
              filter: {
                selector: o
              }
            });
          } else {
            a.updateControls(t.instruction.command);
          }
        }
      } else {
        if (a.config.debug.showWarnings) {
          console.warn(e.messages.warningMultimixInstanceQueueFull());
        }
        i.resolve(a.state);
        e.events.fire("mixBusy", a.dom.container, {
          state: a.state,
          instance: a
        }, a.dom.document);
        if (typeof a.config.callbacks.onMixBusy == "function") {
          a.config.callbacks.onMixBusy.call(a.dom.container, a.state, a);
        }
      }
      return a.callFilters("promiseQueueMix", i.promise, arguments);
    },
    getDataOperation: function (t) {
      var a = this;
      var i = new e.Operation();
      var o = [];
      i = a.callFilters("operationUnmappedGetDataOperation", i, arguments);
      if (a.dom.targets.length && !(o = a.state.activeDataset || []).length) {
        throw new Error(e.messages.errorDatasetNotSet());
      }
      i.id = n.randomHex();
      i.startState = a.state;
      i.startDataset = o;
      i.newDataset = t.slice();
      a.diffDatasets(i);
      i.startOrder = a.targets;
      i.newOrder = i.show;
      if (a.config.animation.enable) {
        a.getStartMixData(i);
        a.setInter(i);
        i.docState = n.getDocumentState(a.dom.document);
        a.getInterMixData(i);
        a.setFinal(i);
        a.getFinalMixData(i);
        a.parseEffects();
        i.hasEffect = a.hasEffect();
        a.getTweenData(i);
      }
      a.targets = i.show.slice();
      i.newState = a.buildState(i);
      Array.prototype.push.apply(a.targets, i.toRemove);
      return i = a.callFilters("operationMappedGetDataOperation", i, arguments);
    },
    diffDatasets: function (t) {
      var a = this;
      var i = [];
      var o = [];
      var r = [];
      var s = null;
      var l = null;
      var c = null;
      var u = null;
      var f = null;
      var h = {};
      var d = "";
      var m = -1;
      a.callActions("beforeDiffDatasets", arguments);
      m = 0;
      for (; s = t.newDataset[m]; m++) {
        if (typeof (d = s[a.config.data.uidKey]) == "undefined" || d.toString().length < 1) {
          throw new TypeError(e.messages.errorDatasetInvalidUidKey({
            uidKey: a.config.data.uidKey
          }));
        }
        if (h[d]) {
          throw new Error(e.messages.errorDatasetDuplicateUid({
            uid: d
          }));
        }
        h[d] = true;
        if ((l = a.cache[d]) instanceof e.Target) {
          if (a.config.data.dirtyCheck && !n.deepEquals(s, l.data)) {
            c = l.render(s);
            l.data = s;
            if (c !== l.dom.el) {
              if (l.isInDom) {
                l.unbindEvents();
                a.dom.parent.replaceChild(c, l.dom.el);
              }
              if (!l.isShown) {
                c.style.display = "none";
              }
              l.dom.el = c;
              if (l.isInDom) {
                l.bindEvents();
              }
            }
          }
          c = l.dom.el;
        } else {
          l = new e.Target();
          l.init(null, a, s);
          l.hide();
        }
        if (l.isInDom) {
          f = l.dom.el.nextElementSibling;
          o.push(d);
          if (u) {
            if (u.lastElementChild) {
              u.appendChild(a.dom.document.createTextNode(" "));
            }
            a.insertDatasetFrag(u, l.dom.el, r);
            u = null;
          }
        } else {
          u ||= a.dom.document.createDocumentFragment();
          if (u.lastElementChild) {
            u.appendChild(a.dom.document.createTextNode(" "));
          }
          u.appendChild(l.dom.el);
          l.isInDom = true;
          l.unbindEvents();
          l.bindEvents();
          l.hide();
          t.toShow.push(l);
          r.push(l);
        }
        t.show.push(l);
      }
      if (u) {
        f = f || a.config.layout.siblingAfter;
        if (f) {
          u.appendChild(a.dom.document.createTextNode(" "));
        }
        a.insertDatasetFrag(u, f, r);
      }
      m = 0;
      for (; s = t.startDataset[m]; m++) {
        d = s[a.config.data.uidKey];
        l = a.cache[d];
        if (t.show.indexOf(l) < 0) {
          t.hide.push(l);
          t.toHide.push(l);
          t.toRemove.push(l);
        } else {
          i.push(d);
        }
      }
      if (!n.isEqualArray(i, o)) {
        t.willSort = true;
      }
      a.callActions("afterDiffDatasets", arguments);
    },
    insertDatasetFrag: function (t, e, a) {
      var i = this;
      var o = e ? n.arrayFromList(i.dom.parent.children).indexOf(e) : i.targets.length;
      for (i.dom.parent.insertBefore(t, e); a.length;) {
        i.targets.splice(o, 0, a.shift());
        o++;
      }
    },
    willSort: function (t, e) {
      var n = this;
      var a = false;
      a = !!n.config.behavior.liveSort || t.order === "random" || t.attribute !== e.attribute || t.order !== e.order || t.collection !== e.collection || t.next === null && !!e.next || !!t.next && e.next === null || !!t.next && !!e.next && n.willSort(t.next, e.next);
      return n.callFilters("resultWillSort", a, arguments);
    },
    show: function () {
      var t = this;
      return t.filter("all");
    },
    hide: function () {
      var t = this;
      return t.filter("none");
    },
    isMixing: function () {
      var t = this;
      return t.isBusy;
    },
    filter: function () {
      var t = this;
      var e = t.parseFilterArgs(arguments);
      return t.multimix({
        filter: e.command
      }, e.animate, e.callback);
    },
    toggleOn: function () {
      var t = this;
      var e = t.parseFilterArgs(arguments);
      var n = e.command.selector;
      var a = "";
      t.isToggling = true;
      if (t.toggleArray.indexOf(n) < 0) {
        t.toggleArray.push(n);
      }
      a = t.getToggleSelector();
      return t.multimix({
        filter: a
      }, e.animate, e.callback);
    },
    toggleOff: function () {
      var t = this;
      var e = t.parseFilterArgs(arguments);
      var n = e.command.selector;
      var a = t.toggleArray.indexOf(n);
      var i = "";
      t.isToggling = true;
      if (a > -1) {
        t.toggleArray.splice(a, 1);
      }
      i = t.getToggleSelector();
      return t.multimix({
        filter: i
      }, e.animate, e.callback);
    },
    sort: function () {
      var t = this;
      var e = t.parseSortArgs(arguments);
      return t.multimix({
        sort: e.command
      }, e.animate, e.callback);
    },
    changeLayout: function () {
      var t = this;
      var e = t.parseChangeLayoutArgs(arguments);
      return t.multimix({
        changeLayout: e.command
      }, e.animate, e.callback);
    },
    dataset: function () {
      var t = this;
      var n = t.parseDatasetArgs(arguments);
      var a = null;
      var i = null;
      var o = false;
      t.callActions("beforeDataset", arguments);
      if (t.isBusy) {
        i = new e.QueueItem();
        i.args = arguments;
        i.instruction = n;
        return t.queueMix(i);
      } else {
        if (n.callback) {
          t.userCallback = n.callback;
        }
        o = n.animate ^ t.config.animation.enable ? n.animate : t.config.animation.enable;
        a = t.getDataOperation(n.command.dataset);
        return t.goMix(o, a);
      }
    },
    multimix: function () {
      var t = this;
      var n = null;
      var a = false;
      var i = null;
      var o = t.parseMultimixArgs(arguments);
      t.callActions("beforeMultimix", arguments);
      if (t.isBusy) {
        i = new e.QueueItem();
        i.args = arguments;
        i.instruction = o;
        i.triggerElement = t.lastClicked;
        i.isToggling = t.isToggling;
        return t.queueMix(i);
      } else {
        n = t.getOperation(o.command);
        if (t.config.controls.enable) {
          if (o.command.filter && !t.isToggling) {
            t.toggleArray.length = 0;
            t.buildToggleArray(n.command);
          }
          if (t.queue.length < 1) {
            t.updateControls(n.command);
          }
        }
        if (o.callback) {
          t.userCallback = o.callback;
        }
        a = o.animate ^ t.config.animation.enable ? o.animate : t.config.animation.enable;
        t.callFilters("operationMultimix", n, arguments);
        return t.goMix(a, n);
      }
    },
    getOperation: function (t) {
      var a = this;
      var i = t.sort;
      var o = t.filter;
      var r = t.changeLayout;
      var s = t.remove;
      var l = t.insert;
      var c = new e.Operation();
      c = a.callFilters("operationUnmappedGetOperation", c, arguments);
      c.id = n.randomHex();
      c.command = t;
      c.startState = a.state;
      c.triggerElement = a.lastClicked;
      if (a.isBusy) {
        if (a.config.debug.showWarnings) {
          console.warn(e.messages.warningGetOperationInstanceBusy());
        }
        return null;
      } else {
        if (l) {
          a.insertTargets(l, c);
        }
        if (s) {
          c.toRemove = s.targets;
        }
        c.startSort = c.newSort = c.startState.activeSort;
        c.startOrder = c.newOrder = a.targets;
        if (i) {
          c.startSort = c.startState.activeSort;
          c.newSort = i;
          c.willSort = a.willSort(i, c.startState.activeSort);
          if (c.willSort) {
            a.sortOperation(c);
          }
        }
        c.startFilter = c.startState.activeFilter;
        if (o) {
          c.newFilter = o;
        } else {
          c.newFilter = n.extend(new e.CommandFilter(), c.startFilter);
        }
        if (c.newFilter.selector === "all") {
          c.newFilter.selector = a.config.selectors.target;
        } else if (c.newFilter.selector === "none") {
          c.newFilter.selector = "";
        }
        a.filterOperation(c);
        c.startContainerClassName = c.startState.activeContainerClassName;
        if (r) {
          c.newContainerClassName = r.containerClassName;
          if (c.newContainerClassName !== c.startContainerClassName) {
            c.willChangeLayout = true;
          }
        } else {
          c.newContainerClassName = c.startContainerClassName;
        }
        if (a.config.animation.enable) {
          a.getStartMixData(c);
          a.setInter(c);
          c.docState = n.getDocumentState(a.dom.document);
          a.getInterMixData(c);
          a.setFinal(c);
          a.getFinalMixData(c);
          a.parseEffects();
          c.hasEffect = a.hasEffect();
          a.getTweenData(c);
        }
        if (c.willSort) {
          a.targets = c.newOrder;
        }
        c.newState = a.buildState(c);
        return a.callFilters("operationMappedGetOperation", c, arguments);
      }
    },
    tween: function (t, e) {
      var n = null;
      var a = null;
      var i = -1;
      var o = -1;
      e = Math.min(e, 1);
      e = Math.max(e, 0);
      o = 0;
      for (; n = t.show[o]; o++) {
        a = t.showPosData[o];
        n.applyTween(a, e);
      }
      for (o = 0; n = t.hide[o]; o++) {
        if (n.isShown) {
          n.hide();
        }
        if ((i = t.toHide.indexOf(n)) > -1) {
          a = t.toHidePosData[i];
          if (!n.isShown) {
            n.show();
          }
          n.applyTween(a, e);
        }
      }
    },
    insert: function () {
      var t = this;
      var e = t.parseInsertArgs(arguments);
      return t.multimix({
        insert: e.command
      }, e.animate, e.callback);
    },
    insertBefore: function () {
      var t = this;
      var e = t.parseInsertArgs(arguments);
      return t.insert(e.command.collection, "before", e.command.sibling, e.animate, e.callback);
    },
    insertAfter: function () {
      var t = this;
      var e = t.parseInsertArgs(arguments);
      return t.insert(e.command.collection, "after", e.command.sibling, e.animate, e.callback);
    },
    prepend: function () {
      var t = this;
      var e = t.parseInsertArgs(arguments);
      return t.insert(0, e.command.collection, e.animate, e.callback);
    },
    append: function () {
      var t = this;
      var e = t.parseInsertArgs(arguments);
      return t.insert(t.state.totalTargets, e.command.collection, e.animate, e.callback);
    },
    remove: function () {
      var t = this;
      var e = t.parseRemoveArgs(arguments);
      return t.multimix({
        remove: e.command
      }, e.animate, e.callback);
    },
    getConfig: function (t) {
      var e = this;
      var a = null;
      a = t ? n.getProperty(e.config, t) : e.config;
      return e.callFilters("valueGetConfig", a, arguments);
    },
    configure: function (t) {
      var e = this;
      e.callActions("beforeConfigure", arguments);
      n.extend(e.config, t, true, true);
      e.callActions("afterConfigure", arguments);
    },
    getState: function () {
      var t = this;
      var a = null;
      a = new e.State();
      n.extend(a, t.state);
      n.freeze(a);
      return t.callFilters("stateGetState", a, arguments);
    },
    forceRefresh: function () {
      var t = this;
      t.indexTargets();
    },
    forceRender: function () {
      var t = this;
      var e = null;
      var n = null;
      var a = "";
      for (a in t.cache) {
        e = t.cache[a];
        n = e.render(e.data);
        if (n !== e.dom.el) {
          if (e.isInDom) {
            e.unbindEvents();
            t.dom.parent.replaceChild(n, e.dom.el);
          }
          if (!e.isShown) {
            n.style.display = "none";
          }
          e.dom.el = n;
          if (e.isInDom) {
            e.bindEvents();
          }
        }
      }
      t.state = t.buildState(t.lastOperation);
    },
    destroy: function (t) {
      var n = this;
      var a = null;
      var i = null;
      var o = 0;
      n.callActions("beforeDestroy", arguments);
      o = 0;
      for (; a = n.controls[o]; o++) {
        a.removeBinding(n);
      }
      for (o = 0; i = n.targets[o]; o++) {
        if (t) {
          i.show();
        }
        i.unbindEvents();
      }
      if (n.dom.container.id.match(/^MixItUp/)) {
        n.dom.container.removeAttribute("id");
      }
      delete e.instances[n.id];
      n.callActions("afterDestroy", arguments);
    }
  });
  e.IMoveData = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.posIn = null;
    this.posOut = null;
    this.operation = null;
    this.callback = null;
    this.statusChange = "";
    this.duration = -1;
    this.staggerIndex = -1;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.IMoveData);
  e.IMoveData.prototype = Object.create(e.Base.prototype);
  e.IMoveData.prototype.constructor = e.IMoveData;
  e.TargetDom = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.el = null;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.TargetDom);
  e.TargetDom.prototype = Object.create(e.Base.prototype);
  e.TargetDom.prototype.constructor = e.TargetDom;
  e.Target = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.id = "";
    this.sortString = "";
    this.mixer = null;
    this.callback = null;
    this.isShown = false;
    this.isBound = false;
    this.isExcluded = false;
    this.isInDom = false;
    this.handler = null;
    this.operation = null;
    this.data = null;
    this.dom = new e.TargetDom();
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.Target);
  e.Target.prototype = Object.create(e.Base.prototype);
  n.extend(e.Target.prototype, {
    constructor: e.Target,
    init: function (t, n, a) {
      var i = this;
      var o = "";
      i.callActions("beforeInit", arguments);
      i.mixer = n;
      t ||= i.render(a);
      i.cacheDom(t);
      i.bindEvents();
      if (i.dom.el.style.display !== "none") {
        i.isShown = true;
      }
      if (a && n.config.data.uidKey) {
        if (typeof (o = a[n.config.data.uidKey]) == "undefined" || o.toString().length < 1) {
          throw new TypeError(e.messages.errorDatasetInvalidUidKey({
            uidKey: n.config.data.uidKey
          }));
        }
        i.id = o;
        i.data = a;
        n.cache[o] = i;
      }
      i.callActions("afterInit", arguments);
    },
    render: function (t) {
      var a = this;
      var i = null;
      var o = null;
      var r = null;
      var s = "";
      a.callActions("beforeRender", arguments);
      i = a.callFilters("renderRender", a.mixer.config.render.target, arguments);
      if (typeof i != "function") {
        throw new TypeError(e.messages.errorDatasetRendererNotSet());
      }
      s = i(t);
      if (s && typeof s == "object" && n.isElement(s)) {
        o = s;
      } else if (typeof s == "string") {
        r = document.createElement("div");
        r.innerHTML = s;
        o = r.firstElementChild;
      }
      return a.callFilters("elRender", o, arguments);
    },
    cacheDom: function (t) {
      var e = this;
      e.callActions("beforeCacheDom", arguments);
      e.dom.el = t;
      e.callActions("afterCacheDom", arguments);
    },
    getSortString: function (t) {
      var e = this;
      var n = e.dom.el.getAttribute("data-" + t) || "";
      e.callActions("beforeGetSortString", arguments);
      n = isNaN(n * 1) ? n.toLowerCase() : n * 1;
      e.sortString = n;
      e.callActions("afterGetSortString", arguments);
    },
    show: function () {
      var t = this;
      t.callActions("beforeShow", arguments);
      if (!t.isShown) {
        t.dom.el.style.display = "";
        t.isShown = true;
      }
      t.callActions("afterShow", arguments);
    },
    hide: function () {
      var t = this;
      t.callActions("beforeHide", arguments);
      if (t.isShown) {
        t.dom.el.style.display = "none";
        t.isShown = false;
      }
      t.callActions("afterHide", arguments);
    },
    move: function (t) {
      var e = this;
      e.callActions("beforeMove", arguments);
      if (!e.isExcluded) {
        e.mixer.targetsMoved++;
      }
      e.applyStylesIn(t);
      requestAnimationFrame(function () {
        e.applyStylesOut(t);
      });
      e.callActions("afterMove", arguments);
    },
    applyTween: function (t, n) {
      var a = this;
      var i = "";
      var o = null;
      var r = t.posIn;
      var s = [];
      var l = new e.StyleData();
      var c = -1;
      a.callActions("beforeApplyTween", arguments);
      l.x = r.x;
      l.y = r.y;
      if (n === 0) {
        a.hide();
      } else if (!a.isShown) {
        a.show();
      }
      c = 0;
      for (; i = e.features.TWEENABLE[c]; c++) {
        o = t.tweenData[i];
        if (i === "x") {
          if (!o) {
            continue;
          }
          l.x = r.x + o * n;
        } else if (i === "y") {
          if (!o) {
            continue;
          }
          l.y = r.y + o * n;
        } else if (o instanceof e.TransformData) {
          if (!o.value) {
            continue;
          }
          l[i].value = r[i].value + o.value * n;
          l[i].unit = o.unit;
          s.push(i + "(" + l[i].value + o.unit + ")");
        } else {
          if (!o) {
            continue;
          }
          l[i] = r[i] + o * n;
          a.dom.el.style[i] = l[i];
        }
      }
      if (l.x || l.y) {
        s.unshift("translate(" + l.x + "px, " + l.y + "px)");
      }
      if (s.length) {
        a.dom.el.style[e.features.transformProp] = s.join(" ");
      }
      a.callActions("afterApplyTween", arguments);
    },
    applyStylesIn: function (t) {
      var n = this;
      var a = t.posIn;
      var i = n.mixer.effectsIn.opacity !== 1;
      var o = [];
      n.callActions("beforeApplyStylesIn", arguments);
      o.push("translate(" + a.x + "px, " + a.y + "px)");
      if (n.mixer.config.animation.animateResizeTargets) {
        if (t.statusChange !== "show") {
          n.dom.el.style.width = a.width + "px";
          n.dom.el.style.height = a.height + "px";
        }
        n.dom.el.style.marginRight = a.marginRight + "px";
        n.dom.el.style.marginBottom = a.marginBottom + "px";
      }
      if (i) {
        n.dom.el.style.opacity = a.opacity;
      }
      if (t.statusChange === "show") {
        o = o.concat(n.mixer.transformIn);
      }
      n.dom.el.style[e.features.transformProp] = o.join(" ");
      n.callActions("afterApplyStylesIn", arguments);
    },
    applyStylesOut: function (t) {
      var n = this;
      var a = [];
      var i = [];
      var o = n.mixer.config.animation.animateResizeTargets;
      var r = typeof n.mixer.effectsIn.opacity != "undefined";
      n.callActions("beforeApplyStylesOut", arguments);
      a.push(n.writeTransitionRule(e.features.transformRule, t.staggerIndex));
      if (t.statusChange !== "none") {
        a.push(n.writeTransitionRule("opacity", t.staggerIndex, t.duration));
      }
      if (o) {
        a.push(n.writeTransitionRule("width", t.staggerIndex, t.duration));
        a.push(n.writeTransitionRule("height", t.staggerIndex, t.duration));
        a.push(n.writeTransitionRule("margin", t.staggerIndex, t.duration));
      }
      if (!t.callback) {
        n.mixer.targetsImmovable++;
        if (n.mixer.targetsMoved === n.mixer.targetsImmovable) {
          n.mixer.cleanUp(t.operation);
        }
        return;
      }
      n.operation = t.operation;
      n.callback = t.callback;
      if (!n.isExcluded) {
        n.mixer.targetsBound++;
      }
      n.isBound = true;
      n.applyTransition(a);
      if (o && t.posOut.width > 0 && t.posOut.height > 0) {
        n.dom.el.style.width = t.posOut.width + "px";
        n.dom.el.style.height = t.posOut.height + "px";
        n.dom.el.style.marginRight = t.posOut.marginRight + "px";
        n.dom.el.style.marginBottom = t.posOut.marginBottom + "px";
      }
      if (!n.mixer.config.animation.nudge && t.statusChange === "hide") {
        i.push("translate(" + t.posOut.x + "px, " + t.posOut.y + "px)");
      }
      switch (t.statusChange) {
        case "hide":
          if (r) {
            n.dom.el.style.opacity = n.mixer.effectsOut.opacity;
          }
          i = i.concat(n.mixer.transformOut);
          break;
        case "show":
          if (r) {
            n.dom.el.style.opacity = 1;
          }
      }
      if (n.mixer.config.animation.nudge || !n.mixer.config.animation.nudge && t.statusChange !== "hide") {
        i.push("translate(" + t.posOut.x + "px, " + t.posOut.y + "px)");
      }
      n.dom.el.style[e.features.transformProp] = i.join(" ");
      n.callActions("afterApplyStylesOut", arguments);
    },
    writeTransitionRule: function (t, e, n) {
      var a = this;
      var i = a.getDelay(e);
      var o = "";
      o = t + " " + (n > 0 ? n : a.mixer.config.animation.duration) + "ms " + i + "ms " + (t === "opacity" ? "linear" : a.mixer.config.animation.easing);
      return a.callFilters("ruleWriteTransitionRule", o, arguments);
    },
    getDelay: function (t) {
      var e = this;
      var n = -1;
      if (typeof e.mixer.config.animation.staggerSequence == "function") {
        t = e.mixer.config.animation.staggerSequence.call(e, t, e.state);
      }
      n = e.mixer.staggerDuration ? t * e.mixer.staggerDuration : 0;
      return e.callFilters("delayGetDelay", n, arguments);
    },
    applyTransition: function (t) {
      var n = this;
      var a = t.join(", ");
      n.callActions("beforeApplyTransition", arguments);
      n.dom.el.style[e.features.transitionProp] = a;
      n.callActions("afterApplyTransition", arguments);
    },
    handleTransitionEnd: function (t) {
      var e = this;
      var n = t.propertyName;
      var a = e.mixer.config.animation.animateResizeTargets;
      e.callActions("beforeHandleTransitionEnd", arguments);
      if (e.isBound && t.target.matches(e.mixer.config.selectors.target) && (n.indexOf("transform") > -1 || n.indexOf("opacity") > -1 || a && n.indexOf("height") > -1 || a && n.indexOf("width") > -1 || a && n.indexOf("margin") > -1)) {
        e.callback.call(e, e.operation);
        e.isBound = false;
        e.callback = null;
        e.operation = null;
      }
      e.callActions("afterHandleTransitionEnd", arguments);
    },
    eventBus: function (t) {
      var e = this;
      e.callActions("beforeEventBus", arguments);
      switch (t.type) {
        case "webkitTransitionEnd":
        case "transitionend":
          e.handleTransitionEnd(t);
      }
      e.callActions("afterEventBus", arguments);
    },
    unbindEvents: function () {
      var t = this;
      t.callActions("beforeUnbindEvents", arguments);
      n.off(t.dom.el, "webkitTransitionEnd", t.handler);
      n.off(t.dom.el, "transitionend", t.handler);
      t.callActions("afterUnbindEvents", arguments);
    },
    bindEvents: function () {
      var t = this;
      var a = "";
      t.callActions("beforeBindEvents", arguments);
      a = e.features.transitionPrefix === "webkit" ? "webkitTransitionEnd" : "transitionend";
      t.handler = function (e) {
        return t.eventBus(e);
      };
      n.on(t.dom.el, a, t.handler);
      t.callActions("afterBindEvents", arguments);
    },
    getPosData: function (n) {
      var a = this;
      var i = {};
      var o = null;
      var r = new e.StyleData();
      a.callActions("beforeGetPosData", arguments);
      r.x = a.dom.el.offsetLeft;
      r.y = a.dom.el.offsetTop;
      if (a.mixer.config.animation.animateResizeTargets || n) {
        o = a.dom.el.getBoundingClientRect();
        r.top = o.top;
        r.right = o.right;
        r.bottom = o.bottom;
        r.left = o.left;
        r.width = o.width;
        r.height = o.height;
      }
      if (a.mixer.config.animation.animateResizeTargets) {
        i = t.getComputedStyle(a.dom.el);
        r.marginBottom = parseFloat(i.marginBottom);
        r.marginRight = parseFloat(i.marginRight);
      }
      return a.callFilters("posDataGetPosData", r, arguments);
    },
    cleanUp: function () {
      var t = this;
      t.callActions("beforeCleanUp", arguments);
      t.dom.el.style[e.features.transformProp] = "";
      t.dom.el.style[e.features.transitionProp] = "";
      t.dom.el.style.opacity = "";
      if (t.mixer.config.animation.animateResizeTargets) {
        t.dom.el.style.width = "";
        t.dom.el.style.height = "";
        t.dom.el.style.marginRight = "";
        t.dom.el.style.marginBottom = "";
      }
      t.callActions("afterCleanUp", arguments);
    }
  });
  e.Collection = function (t) {
    var e = null;
    var a = -1;
    this.callActions("beforeConstruct");
    a = 0;
    for (; e = t[a]; a++) {
      this[a] = e;
    }
    this.length = t.length;
    this.callActions("afterConstruct");
    n.freeze(this);
  };
  e.BaseStatic.call(e.Collection);
  e.Collection.prototype = Object.create(e.Base.prototype);
  n.extend(e.Collection.prototype, {
    constructor: e.Collection,
    mixitup: function (t) {
      var a = this;
      var i = null;
      var o = Array.prototype.slice.call(arguments);
      var r = [];
      var s = -1;
      this.callActions("beforeMixitup");
      o.shift();
      s = 0;
      for (; i = a[s]; s++) {
        r.push(i[t].apply(i, o));
      }
      return a.callFilters("promiseMixitup", n.all(r, e.libraries), arguments);
    }
  });
  e.Operation = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.id = "";
    this.args = [];
    this.command = null;
    this.showPosData = [];
    this.toHidePosData = [];
    this.startState = null;
    this.newState = null;
    this.docState = null;
    this.willSort = false;
    this.willChangeLayout = false;
    this.hasEffect = false;
    this.hasFailed = false;
    this.triggerElement = null;
    this.show = [];
    this.hide = [];
    this.matching = [];
    this.toShow = [];
    this.toHide = [];
    this.toMove = [];
    this.toRemove = [];
    this.startOrder = [];
    this.newOrder = [];
    this.startSort = null;
    this.newSort = null;
    this.startFilter = null;
    this.newFilter = null;
    this.startDataset = null;
    this.newDataset = null;
    this.viewportDeltaX = 0;
    this.viewportDeltaY = 0;
    this.startX = 0;
    this.startY = 0;
    this.startHeight = 0;
    this.startWidth = 0;
    this.newX = 0;
    this.newY = 0;
    this.newHeight = 0;
    this.newWidth = 0;
    this.startContainerClassName = "";
    this.startDisplay = "";
    this.newContainerClassName = "";
    this.newDisplay = "";
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.Operation);
  e.Operation.prototype = Object.create(e.Base.prototype);
  e.Operation.prototype.constructor = e.Operation;
  e.State = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.id = "";
    this.activeFilter = null;
    this.activeSort = null;
    this.activeContainerClassName = "";
    this.container = null;
    this.targets = [];
    this.hide = [];
    this.show = [];
    this.matching = [];
    this.totalTargets = -1;
    this.totalShow = -1;
    this.totalHide = -1;
    this.totalMatching = -1;
    this.hasFailed = false;
    this.triggerElement = null;
    this.activeDataset = null;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.State);
  e.State.prototype = Object.create(e.Base.prototype);
  e.State.prototype.constructor = e.State;
  e.UserInstruction = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.command = {};
    this.animate = false;
    this.callback = null;
    this.callActions("afterConstruct");
    n.seal(this);
  };
  e.BaseStatic.call(e.UserInstruction);
  e.UserInstruction.prototype = Object.create(e.Base.prototype);
  e.UserInstruction.prototype.constructor = e.UserInstruction;
  e.Messages = function () {
    e.Base.call(this);
    this.callActions("beforeConstruct");
    this.ERROR_FACTORY_INVALID_CONTAINER = "[MixItUp] An invalid selector or element reference was passed to the mixitup factory function";
    this.ERROR_FACTORY_CONTAINER_NOT_FOUND = "[MixItUp] The provided selector yielded no container element";
    this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS = "[MixItUp] Invalid value for `animation.effects`";
    this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE = "[MixItUp] Invalid value for `controls.scope`";
    this.ERROR_CONFIG_INVALID_PROPERTY = "[MixitUp] Invalid configuration object property \"${erroneous}\"${suggestion}";
    this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION = ". Did you mean \"${probableMatch}\"?";
    this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET = "[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`";
    this.ERROR_DATASET_INVALID_UID_KEY = "[MixItUp] The specified UID key \"${uidKey}\" is not present on one or more dataset items";
    this.ERROR_DATASET_DUPLICATE_UID = "[MixItUp] The UID \"${uid}\" was found on two or more dataset items. UIDs must be unique.";
    this.ERROR_INSERT_INVALID_ARGUMENTS = "[MixItUp] Please provider either an index or a sibling and position to insert, not both";
    this.ERROR_INSERT_PREEXISTING_ELEMENT = "[MixItUp] An element to be inserted already exists in the container";
    this.ERROR_FILTER_INVALID_ARGUMENTS = "[MixItUp] Please provide either a selector or collection `.filter()`, not both";
    this.ERROR_DATASET_NOT_SET = "[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`";
    this.ERROR_DATASET_PRERENDERED_MISMATCH = "[MixItUp] `load.dataset` does not match pre-rendered targets";
    this.ERROR_DATASET_RENDERER_NOT_SET = "[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`";
    this.ERROR_SORT_NON_EXISTENT_ELEMENT = "[MixItUp] An element to be sorted does not already exist in the container";
    this.WARNING_FACTORY_PREEXISTING_INSTANCE = "[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.";
    this.WARNING_INSERT_NO_ELEMENTS = "[MixItUp] WARNING: No valid elements were passed to `.insert()`";
    this.WARNING_REMOVE_NO_ELEMENTS = "[MixItUp] WARNING: No valid elements were passed to `.remove()`";
    this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL = "[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.";
    this.WARNING_GET_OPERATION_INSTANCE_BUSY = "[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.";
    this.WARNING_NO_PROMISE_IMPLEMENTATION = "[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.";
    this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES = "[MixItUp] WARNING: The requested sorting data attribute \"${attribute}\" was not present on one or more target elements which may product unexpected sort output";
    this.callActions("afterConstruct");
    this.compileTemplates();
    n.seal(this);
  };
  e.BaseStatic.call(e.Messages);
  e.Messages.prototype = Object.create(e.Base.prototype);
  e.Messages.prototype.constructor = e.Messages;
  e.Messages.prototype.compileTemplates = function () {
    var t = "";
    var e = "";
    for (t in this) {
      if (typeof (e = this[t]) == "string") {
        this[n.camelCase(t)] = n.template(e);
      }
    }
  };
  e.messages = new e.Messages();
  e.Facade = function (t) {
    e.Base.call(this);
    this.callActions("beforeConstruct", arguments);
    this.configure = t.configure.bind(t);
    this.show = t.show.bind(t);
    this.hide = t.hide.bind(t);
    this.filter = t.filter.bind(t);
    this.toggleOn = t.toggleOn.bind(t);
    this.toggleOff = t.toggleOff.bind(t);
    this.sort = t.sort.bind(t);
    this.changeLayout = t.changeLayout.bind(t);
    this.multimix = t.multimix.bind(t);
    this.dataset = t.dataset.bind(t);
    this.tween = t.tween.bind(t);
    this.insert = t.insert.bind(t);
    this.insertBefore = t.insertBefore.bind(t);
    this.insertAfter = t.insertAfter.bind(t);
    this.prepend = t.prepend.bind(t);
    this.append = t.append.bind(t);
    this.remove = t.remove.bind(t);
    this.destroy = t.destroy.bind(t);
    this.forceRefresh = t.forceRefresh.bind(t);
    this.forceRender = t.forceRender.bind(t);
    this.isMixing = t.isMixing.bind(t);
    this.getOperation = t.getOperation.bind(t);
    this.getConfig = t.getConfig.bind(t);
    this.getState = t.getState.bind(t);
    this.callActions("afterConstruct", arguments);
    n.freeze(this);
    n.seal(this);
  };
  e.BaseStatic.call(e.Facade);
  e.Facade.prototype = Object.create(e.Base.prototype);
  e.Facade.prototype.constructor = e.Facade;
  if (typeof exports == "object" && typeof module == "object") {
    module.exports = e;
  } else if (typeof define == "function" && define.amd) {
    define(function () {
      return e;
    });
  } else if (typeof t.mixitup == "undefined" || typeof t.mixitup != "function") {
    t.mixitup = e;
  }
  e.BaseStatic.call(e.constructor);
  e.NAME = "mixitup";
  e.CORE_VERSION = "3.3.1";
})(window);
