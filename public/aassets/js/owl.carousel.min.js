/**
 * Owl Carousel v2.3.4
 * Copyright 2013-2018 David Deutsch
 * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE
 */
(function (a, b, c, d) {
  function e(b, c) {
    this.settings = null;
    this.options = a.extend({}, e.Defaults, c);
    this.$element = a(b);
    this._handlers = {};
    this._plugins = {};
    this._supress = {};
    this._current = null;
    this._speed = null;
    this._coordinates = [];
    this._breakpoint = null;
    this._width = null;
    this._items = [];
    this._clones = [];
    this._mergers = [];
    this._widths = [];
    this._invalidated = {};
    this._pipe = [];
    this._drag = {
      time: null,
      target: null,
      pointer: null,
      stage: {
        start: null,
        current: null
      },
      direction: null
    };
    this._states = {
      current: {},
      tags: {
        initializing: ["busy"],
        animating: ["busy"],
        dragging: ["interacting"]
      }
    };
    a.each(["onResize", "onThrottledResize"], a.proxy(function (b, c) {
      this._handlers[c] = a.proxy(this[c], this);
    }, this));
    a.each(e.Plugins, a.proxy(function (a, b) {
      this._plugins[a.charAt(0).toLowerCase() + a.slice(1)] = new b(this);
    }, this));
    a.each(e.Workers, a.proxy(function (b, c) {
      this._pipe.push({
        filter: c.filter,
        run: a.proxy(c.run, this)
      });
    }, this));
    this.setup();
    this.initialize();
  }
  e.Defaults = {
    items: 3,
    loop: false,
    center: false,
    rewind: false,
    checkVisibility: true,
    mouseDrag: true,
    touchDrag: true,
    pullDrag: true,
    freeDrag: false,
    margin: 0,
    stagePadding: 0,
    merge: false,
    mergeFit: true,
    autoWidth: false,
    startPosition: 0,
    rtl: false,
    smartSpeed: 250,
    fluidSpeed: false,
    dragEndSpeed: false,
    responsive: {},
    responsiveRefreshRate: 200,
    responsiveBaseElement: b,
    fallbackEasing: "swing",
    slideTransition: "",
    info: false,
    nestedItemSelector: false,
    itemElement: "div",
    stageElement: "div",
    refreshClass: "owl-refresh",
    loadedClass: "owl-loaded",
    loadingClass: "owl-loading",
    rtlClass: "owl-rtl",
    responsiveClass: "owl-responsive",
    dragClass: "owl-drag",
    itemClass: "owl-item",
    stageClass: "owl-stage",
    stageOuterClass: "owl-stage-outer",
    grabClass: "owl-grab"
  };
  e.Width = {
    Default: "default",
    Inner: "inner",
    Outer: "outer"
  };
  e.Type = {
    Event: "event",
    State: "state"
  };
  e.Plugins = {};
  e.Workers = [{
    filter: ["width", "settings"],
    run: function () {
      this._width = this.$element.width();
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function (a) {
      a.current = this._items && this._items[this.relative(this._current)];
    }
  }, {
    filter: ["items", "settings"],
    run: function () {
      this.$stage.children(".cloned").remove();
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function (a) {
      var b = this.settings.margin || "";
      var c = !this.settings.autoWidth;
      var d = this.settings.rtl;
      var e = {
        width: "auto",
        "margin-left": d ? b : "",
        "margin-right": d ? "" : b
      };
      if (!c) {
        this.$stage.children().css(e);
      }
      a.css = e;
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function (a) {
      var b = (this.width() / this.settings.items).toFixed(3) - this.settings.margin;
      var c = null;
      var d = this._items.length;
      var e = !this.settings.autoWidth;
      var f = [];
      for (a.items = {
        merge: false,
        width: b
      }; d--;) {
        c = this._mergers[d];
        c = this.settings.mergeFit && Math.min(c, this.settings.items) || c;
        a.items.merge = c > 1 || a.items.merge;
        f[d] = e ? b * c : this._items[d].width();
      }
      this._widths = f;
    }
  }, {
    filter: ["items", "settings"],
    run: function () {
      var b = [];
      var c = this._items;
      var d = this.settings;
      var e = Math.max(d.items * 2, 4);
      var f = Math.ceil(c.length / 2) * 2;
      var g = d.loop && c.length ? d.rewind ? e : Math.max(e, f) : 0;
      var h = "";
      var i = "";
      for (g /= 2; g > 0;) {
        b.push(this.normalize(b.length / 2, true));
        h += c[b[b.length - 1]][0].outerHTML;
        b.push(this.normalize(c.length - 1 - (b.length - 1) / 2, true));
        i = c[b[b.length - 1]][0].outerHTML + i;
        g -= 1;
      }
      this._clones = b;
      a(h).addClass("cloned").appendTo(this.$stage);
      a(i).addClass("cloned").prependTo(this.$stage);
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function () {
      var a = this.settings.rtl ? 1 : -1;
      for (var b = this._clones.length + this._items.length, c = -1, d = 0, e = 0, f = []; ++c < b;) {
        d = f[c - 1] || 0;
        e = this._widths[this.relative(c)] + this.settings.margin;
        f.push(d + e * a);
      }
      this._coordinates = f;
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function () {
      var a = this.settings.stagePadding;
      var b = this._coordinates;
      var c = {
        width: Math.ceil(Math.abs(b[b.length - 1])) + a * 2,
        "padding-left": a || "",
        "padding-right": a || ""
      };
      this.$stage.css(c);
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function (a) {
      var b = this._coordinates.length;
      var c = !this.settings.autoWidth;
      var d = this.$stage.children();
      if (c && a.items.merge) {
        while (b--) {
          a.css.width = this._widths[this.relative(b)];
          d.eq(b).css(a.css);
        }
      } else if (c) {
        a.css.width = a.items.width;
        d.css(a.css);
      }
    }
  }, {
    filter: ["items"],
    run: function () {
      if (this._coordinates.length < 1) {
        this.$stage.removeAttr("style");
      }
    }
  }, {
    filter: ["width", "items", "settings"],
    run: function (a) {
      a.current = a.current ? this.$stage.children().index(a.current) : 0;
      a.current = Math.max(this.minimum(), Math.min(this.maximum(), a.current));
      this.reset(a.current);
    }
  }, {
    filter: ["position"],
    run: function () {
      this.animate(this.coordinates(this._current));
    }
  }, {
    filter: ["width", "position", "items", "settings"],
    run: function () {
      var a;
      var b;
      var c;
      var d;
      var e = this.settings.rtl ? 1 : -1;
      var f = this.settings.stagePadding * 2;
      var g = this.coordinates(this.current()) + f;
      var h = g + this.width() * e;
      var i = [];
      c = 0;
      d = this._coordinates.length;
      for (; c < d; c++) {
        a = this._coordinates[c - 1] || 0;
        b = Math.abs(this._coordinates[c]) + f * e;
        if (this.op(a, "<=", g) && this.op(a, ">", h) || this.op(b, "<", g) && this.op(b, ">", h)) {
          i.push(c);
        }
      }
      this.$stage.children(".active").removeClass("active");
      this.$stage.children(":eq(" + i.join("), :eq(") + ")").addClass("active");
      this.$stage.children(".center").removeClass("center");
      if (this.settings.center) {
        this.$stage.children().eq(this.current()).addClass("center");
      }
    }
  }];
  e.prototype.initializeStage = function () {
    this.$stage = this.$element.find("." + this.settings.stageClass);
    if (!this.$stage.length) {
      this.$element.addClass(this.options.loadingClass);
      this.$stage = a("<" + this.settings.stageElement + ">", {
        class: this.settings.stageClass
      }).wrap(a("<div/>", {
        class: this.settings.stageOuterClass
      }));
      this.$element.append(this.$stage.parent());
    }
  };
  e.prototype.initializeItems = function () {
    var b = this.$element.find(".owl-item");
    if (b.length) {
      this._items = b.get().map(function (b) {
        return a(b);
      });
      this._mergers = this._items.map(function () {
        return 1;
      });
      this.refresh();
      return;
    }
    this.replace(this.$element.children().not(this.$stage.parent()));
    if (this.isVisible()) {
      this.refresh();
    } else {
      this.invalidate("width");
    }
    this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass);
  };
  e.prototype.initialize = function () {
    this.enter("initializing");
    this.trigger("initialize");
    this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl);
    if (this.settings.autoWidth && !this.is("pre-loading")) {
      var a;
      var b;
      var c;
      a = this.$element.find("img");
      b = this.settings.nestedItemSelector ? "." + this.settings.nestedItemSelector : d;
      c = this.$element.children(b).width();
      if (a.length && c <= 0) {
        this.preloadAutoWidthImages(a);
      }
    }
    this.initializeStage();
    this.initializeItems();
    this.registerEventHandlers();
    this.leave("initializing");
    this.trigger("initialized");
  };
  e.prototype.isVisible = function () {
    return !this.settings.checkVisibility || this.$element.is(":visible");
  };
  e.prototype.setup = function () {
    var b = this.viewport();
    var c = this.options.responsive;
    var d = -1;
    var e = null;
    if (c) {
      a.each(c, function (a) {
        if (a <= b && a > d) {
          d = Number(a);
        }
      });
      e = a.extend({}, this.options, c[d]);
      if (typeof e.stagePadding == "function") {
        e.stagePadding = e.stagePadding();
      }
      delete e.responsive;
      if (e.responsiveClass) {
        this.$element.attr("class", this.$element.attr("class").replace(new RegExp("(" + this.options.responsiveClass + "-)\\S+\\s", "g"), "$1" + d));
      }
    } else {
      e = a.extend({}, this.options);
    }
    this.trigger("change", {
      property: {
        name: "settings",
        value: e
      }
    });
    this._breakpoint = d;
    this.settings = e;
    this.invalidate("settings");
    this.trigger("changed", {
      property: {
        name: "settings",
        value: this.settings
      }
    });
  };
  e.prototype.optionsLogic = function () {
    if (this.settings.autoWidth) {
      this.settings.stagePadding = false;
      this.settings.merge = false;
    }
  };
  e.prototype.prepare = function (b) {
    var c = this.trigger("prepare", {
      content: b
    });
    c.data ||= a("<" + this.settings.itemElement + "/>").addClass(this.options.itemClass).append(b);
    this.trigger("prepared", {
      content: c.data
    });
    return c.data;
  };
  e.prototype.update = function () {
    for (var b = 0, c = this._pipe.length, d = a.proxy(function (a) {
        return this[a];
      }, this._invalidated), e = {}; b < c;) {
      if (this._invalidated.all || a.grep(this._pipe[b].filter, d).length > 0) {
        this._pipe[b].run(e);
      }
      b++;
    }
    this._invalidated = {};
    if (!this.is("valid")) {
      this.enter("valid");
    }
  };
  e.prototype.width = function (a) {
    switch (a = a || e.Width.Default) {
      case e.Width.Inner:
      case e.Width.Outer:
        return this._width;
      default:
        return this._width - this.settings.stagePadding * 2 + this.settings.margin;
    }
  };
  e.prototype.refresh = function () {
    this.enter("refreshing");
    this.trigger("refresh");
    this.setup();
    this.optionsLogic();
    this.$element.addClass(this.options.refreshClass);
    this.update();
    this.$element.removeClass(this.options.refreshClass);
    this.leave("refreshing");
    this.trigger("refreshed");
  };
  e.prototype.onThrottledResize = function () {
    b.clearTimeout(this.resizeTimer);
    this.resizeTimer = b.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
  };
  e.prototype.onResize = function () {
    return !!this._items.length && this._width !== this.$element.width() && !!this.isVisible() && (this.enter("resizing"), this.trigger("resize").isDefaultPrevented() ? (this.leave("resizing"), false) : (this.invalidate("width"), this.refresh(), this.leave("resizing"), void this.trigger("resized")));
  };
  e.prototype.registerEventHandlers = function () {
    if (a.support.transition) {
      this.$stage.on(a.support.transition.end + ".owl.core", a.proxy(this.onTransitionEnd, this));
    }
    if (this.settings.responsive !== false) {
      this.on(b, "resize", this._handlers.onThrottledResize);
    }
    if (this.settings.mouseDrag) {
      this.$element.addClass(this.options.dragClass);
      this.$stage.on("mousedown.owl.core", a.proxy(this.onDragStart, this));
      this.$stage.on("dragstart.owl.core selectstart.owl.core", function () {
        return false;
      });
    }
    if (this.settings.touchDrag) {
      this.$stage.on("touchstart.owl.core", a.proxy(this.onDragStart, this));
      this.$stage.on("touchcancel.owl.core", a.proxy(this.onDragEnd, this));
    }
  };
  e.prototype.onDragStart = function (b) {
    var d = null;
    if (b.which !== 3) {
      if (a.support.transform) {
        d = this.$stage.css("transform").replace(/.*\(|\)| /g, "").split(",");
        d = {
          x: d[d.length === 16 ? 12 : 4],
          y: d[d.length === 16 ? 13 : 5]
        };
      } else {
        d = this.$stage.position();
        d = {
          x: this.settings.rtl ? d.left + this.$stage.width() - this.width() + this.settings.margin : d.left,
          y: d.top
        };
      }
      if (this.is("animating")) {
        if (a.support.transform) {
          this.animate(d.x);
        } else {
          this.$stage.stop();
        }
        this.invalidate("position");
      }
      this.$element.toggleClass(this.options.grabClass, b.type === "mousedown");
      this.speed(0);
      this._drag.time = new Date().getTime();
      this._drag.target = a(b.target);
      this._drag.stage.start = d;
      this._drag.stage.current = d;
      this._drag.pointer = this.pointer(b);
      a(c).on("mouseup.owl.core touchend.owl.core", a.proxy(this.onDragEnd, this));
      a(c).one("mousemove.owl.core touchmove.owl.core", a.proxy(function (b) {
        var d = this.difference(this._drag.pointer, this.pointer(b));
        a(c).on("mousemove.owl.core touchmove.owl.core", a.proxy(this.onDragMove, this));
        if (!(Math.abs(d.x) < Math.abs(d.y)) || !this.is("valid")) {
          b.preventDefault();
          this.enter("dragging");
          this.trigger("drag");
        }
      }, this));
    }
  };
  e.prototype.onDragMove = function (a) {
    var b = null;
    var c = null;
    var d = null;
    var e = this.difference(this._drag.pointer, this.pointer(a));
    var f = this.difference(this._drag.stage.start, e);
    if (this.is("dragging")) {
      a.preventDefault();
      if (this.settings.loop) {
        b = this.coordinates(this.minimum());
        c = this.coordinates(this.maximum() + 1) - b;
        f.x = ((f.x - b) % c + c) % c + b;
      } else {
        b = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());
        c = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());
        d = this.settings.pullDrag ? e.x * -1 / 5 : 0;
        f.x = Math.max(Math.min(f.x, b + d), c + d);
      }
      this._drag.stage.current = f;
      this.animate(f.x);
    }
  };
  e.prototype.onDragEnd = function (b) {
    var d = this.difference(this._drag.pointer, this.pointer(b));
    var e = this._drag.stage.current;
    var f = d.x > 0 ^ this.settings.rtl ? "left" : "right";
    a(c).off(".owl.core");
    this.$element.removeClass(this.options.grabClass);
    if (d.x !== 0 && this.is("dragging") || !this.is("valid")) {
      this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);
      this.current(this.closest(e.x, d.x !== 0 ? f : this._drag.direction));
      this.invalidate("position");
      this.update();
      this._drag.direction = f;
      if (Math.abs(d.x) > 3 || new Date().getTime() - this._drag.time > 300) {
        this._drag.target.one("click.owl.core", function () {
          return false;
        });
      }
    }
    if (this.is("dragging")) {
      this.leave("dragging");
      this.trigger("dragged");
    }
  };
  e.prototype.closest = function (b, c) {
    var e = -1;
    var f = 30;
    var g = this.width();
    var h = this.coordinates();
    if (!this.settings.freeDrag) {
      a.each(h, a.proxy(function (a, i) {
        if (c === "left" && b > i - f && b < i + f) {
          e = a;
        } else if (c === "right" && b > i - g - f && b < i - g + f) {
          e = a + 1;
        } else if (this.op(b, "<", i) && this.op(b, ">", h[a + 1] !== d ? h[a + 1] : i - g)) {
          e = c === "left" ? a + 1 : a;
        }
        return e === -1;
      }, this));
    }
    if (!this.settings.loop) {
      if (this.op(b, ">", h[this.minimum()])) {
        e = b = this.minimum();
      } else if (this.op(b, "<", h[this.maximum()])) {
        e = b = this.maximum();
      }
    }
    return e;
  };
  e.prototype.animate = function (b) {
    var c = this.speed() > 0;
    if (this.is("animating")) {
      this.onTransitionEnd();
    }
    if (c) {
      this.enter("animating");
      this.trigger("translate");
    }
    if (a.support.transform3d && a.support.transition) {
      this.$stage.css({
        transform: "translate3d(" + b + "px,0px,0px)",
        transition: this.speed() / 1000 + "s" + (this.settings.slideTransition ? " " + this.settings.slideTransition : "")
      });
    } else if (c) {
      this.$stage.animate({
        left: b + "px"
      }, this.speed(), this.settings.fallbackEasing, a.proxy(this.onTransitionEnd, this));
    } else {
      this.$stage.css({
        left: b + "px"
      });
    }
  };
  e.prototype.is = function (a) {
    return this._states.current[a] && this._states.current[a] > 0;
  };
  e.prototype.current = function (a) {
    if (a === d) {
      return this._current;
    }
    if (this._items.length === 0) {
      return d;
    }
    a = this.normalize(a);
    if (this._current !== a) {
      var b = this.trigger("change", {
        property: {
          name: "position",
          value: a
        }
      });
      if (b.data !== d) {
        a = this.normalize(b.data);
      }
      this._current = a;
      this.invalidate("position");
      this.trigger("changed", {
        property: {
          name: "position",
          value: this._current
        }
      });
    }
    return this._current;
  };
  e.prototype.invalidate = function (b) {
    if (a.type(b) === "string") {
      this._invalidated[b] = true;
      if (this.is("valid")) {
        this.leave("valid");
      }
    }
    return a.map(this._invalidated, function (a, b) {
      return b;
    });
  };
  e.prototype.reset = function (a) {
    if ((a = this.normalize(a)) !== d) {
      this._speed = 0;
      this._current = a;
      this.suppress(["translate", "translated"]);
      this.animate(this.coordinates(a));
      this.release(["translate", "translated"]);
    }
  };
  e.prototype.normalize = function (a, b) {
    var c = this._items.length;
    var e = b ? 0 : this._clones.length;
    if (!this.isNumeric(a) || c < 1) {
      a = d;
    } else if (a < 0 || a >= c + e) {
      a = ((a - e / 2) % c + c) % c + e / 2;
    }
    return a;
  };
  e.prototype.relative = function (a) {
    a -= this._clones.length / 2;
    return this.normalize(a, true);
  };
  e.prototype.maximum = function (a) {
    var b;
    var c;
    var d;
    var e = this.settings;
    var f = this._coordinates.length;
    if (e.loop) {
      f = this._clones.length / 2 + this._items.length - 1;
    } else if (e.autoWidth || e.merge) {
      if (b = this._items.length) {
        c = this._items[--b].width();
        d = this.$element.width();
        while (b-- && !((c += this._items[b].width() + this.settings.margin) > d));
      }
      f = b + 1;
    } else {
      f = e.center ? this._items.length - 1 : this._items.length - e.items;
    }
    if (a) {
      f -= this._clones.length / 2;
    }
    return Math.max(f, 0);
  };
  e.prototype.minimum = function (a) {
    if (a) {
      return 0;
    } else {
      return this._clones.length / 2;
    }
  };
  e.prototype.items = function (a) {
    if (a === d) {
      return this._items.slice();
    } else {
      a = this.normalize(a, true);
      return this._items[a];
    }
  };
  e.prototype.mergers = function (a) {
    if (a === d) {
      return this._mergers.slice();
    } else {
      a = this.normalize(a, true);
      return this._mergers[a];
    }
  };
  e.prototype.clones = function (b) {
    var c = this._clones.length / 2;
    var e = c + this._items.length;
    function f(a) {
      if (a % 2 == 0) {
        return e + a / 2;
      } else {
        return c - (a + 1) / 2;
      }
    }
    if (b === d) {
      return a.map(this._clones, function (a, b) {
        return f(b);
      });
    } else {
      return a.map(this._clones, function (a, c) {
        if (a === b) {
          return f(c);
        } else {
          return null;
        }
      });
    }
  };
  e.prototype.speed = function (a) {
    if (a !== d) {
      this._speed = a;
    }
    return this._speed;
  };
  e.prototype.coordinates = function (b) {
    var c;
    var e = 1;
    var f = b - 1;
    if (b === d) {
      return a.map(this._coordinates, a.proxy(function (a, b) {
        return this.coordinates(b);
      }, this));
    } else {
      if (this.settings.center) {
        if (this.settings.rtl) {
          e = -1;
          f = b + 1;
        }
        c = this._coordinates[b];
        c += (this.width() - c + (this._coordinates[f] || 0)) / 2 * e;
      } else {
        c = this._coordinates[f] || 0;
      }
      return c = Math.ceil(c);
    }
  };
  e.prototype.duration = function (a, b, c) {
    if (c === 0) {
      return 0;
    } else {
      return Math.min(Math.max(Math.abs(b - a), 1), 6) * Math.abs(c || this.settings.smartSpeed);
    }
  };
  e.prototype.to = function (a, b) {
    var c = this.current();
    var d = null;
    var e = a - this.relative(c);
    var f = (e > 0) - (e < 0);
    var g = this._items.length;
    var h = this.minimum();
    var i = this.maximum();
    if (this.settings.loop) {
      if (!this.settings.rewind && Math.abs(e) > g / 2) {
        e += f * -1 * g;
      }
      a = c + e;
      if ((d = ((a - h) % g + g) % g + h) !== a && d - e <= i && d - e > 0) {
        c = d - e;
        a = d;
        this.reset(c);
      }
    } else if (this.settings.rewind) {
      i += 1;
      a = (a % i + i) % i;
    } else {
      a = Math.max(h, Math.min(i, a));
    }
    this.speed(this.duration(c, a, b));
    this.current(a);
    if (this.isVisible()) {
      this.update();
    }
  };
  e.prototype.next = function (a) {
    a = a || false;
    this.to(this.relative(this.current()) + 1, a);
  };
  e.prototype.prev = function (a) {
    a = a || false;
    this.to(this.relative(this.current()) - 1, a);
  };
  e.prototype.onTransitionEnd = function (a) {
    if (a !== d && (a.stopPropagation(), (a.target || a.srcElement || a.originalTarget) !== this.$stage.get(0))) {
      return false;
    }
    this.leave("animating");
    this.trigger("translated");
  };
  e.prototype.viewport = function () {
    var d;
    if (this.options.responsiveBaseElement !== b) {
      d = a(this.options.responsiveBaseElement).width();
    } else if (b.innerWidth) {
      d = b.innerWidth;
    } else if (c.documentElement && c.documentElement.clientWidth) {
      d = c.documentElement.clientWidth;
    } else {
      console.warn("Can not detect viewport width.");
    }
    return d;
  };
  e.prototype.replace = function (b) {
    this.$stage.empty();
    this._items = [];
    b &&= b instanceof jQuery ? b : a(b);
    if (this.settings.nestedItemSelector) {
      b = b.find("." + this.settings.nestedItemSelector);
    }
    b.filter(function () {
      return this.nodeType === 1;
    }).each(a.proxy(function (a, b) {
      b = this.prepare(b);
      this.$stage.append(b);
      this._items.push(b);
      this._mergers.push(b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") * 1 || 1);
    }, this));
    this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);
    this.invalidate("items");
  };
  e.prototype.add = function (b, c) {
    var e = this.relative(this._current);
    c = c === d ? this._items.length : this.normalize(c, true);
    b = b instanceof jQuery ? b : a(b);
    this.trigger("add", {
      content: b,
      position: c
    });
    b = this.prepare(b);
    if (this._items.length === 0 || c === this._items.length) {
      if (this._items.length === 0) {
        this.$stage.append(b);
      }
      if (this._items.length !== 0) {
        this._items[c - 1].after(b);
      }
      this._items.push(b);
      this._mergers.push(b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") * 1 || 1);
    } else {
      this._items[c].before(b);
      this._items.splice(c, 0, b);
      this._mergers.splice(c, 0, b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") * 1 || 1);
    }
    if (this._items[e]) {
      this.reset(this._items[e].index());
    }
    this.invalidate("items");
    this.trigger("added", {
      content: b,
      position: c
    });
  };
  e.prototype.remove = function (a) {
    if ((a = this.normalize(a, true)) !== d) {
      this.trigger("remove", {
        content: this._items[a],
        position: a
      });
      this._items[a].remove();
      this._items.splice(a, 1);
      this._mergers.splice(a, 1);
      this.invalidate("items");
      this.trigger("removed", {
        content: null,
        position: a
      });
    }
  };
  e.prototype.preloadAutoWidthImages = function (b) {
    b.each(a.proxy(function (b, c) {
      this.enter("pre-loading");
      c = a(c);
      a(new Image()).one("load", a.proxy(function (a) {
        c.attr("src", a.target.src);
        c.css("opacity", 1);
        this.leave("pre-loading");
        if (!this.is("pre-loading") && !this.is("initializing")) {
          this.refresh();
        }
      }, this)).attr("src", c.attr("src") || c.attr("data-src") || c.attr("data-src-retina"));
    }, this));
  };
  e.prototype.destroy = function () {
    this.$element.off(".owl.core");
    this.$stage.off(".owl.core");
    a(c).off(".owl.core");
    if (this.settings.responsive !== false) {
      b.clearTimeout(this.resizeTimer);
      this.off(b, "resize", this._handlers.onThrottledResize);
    }
    for (var d in this._plugins) {
      this._plugins[d].destroy();
    }
    this.$stage.children(".cloned").remove();
    this.$stage.unwrap();
    this.$stage.children().contents().unwrap();
    this.$stage.children().unwrap();
    this.$stage.remove();
    this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class", this.$element.attr("class").replace(new RegExp(this.options.responsiveClass + "-\\S+\\s", "g"), "")).removeData("owl.carousel");
  };
  e.prototype.op = function (a, b, c) {
    var d = this.settings.rtl;
    switch (b) {
      case "<":
        if (d) {
          return a > c;
        } else {
          return a < c;
        }
      case ">":
        if (d) {
          return a < c;
        } else {
          return a > c;
        }
      case ">=":
        if (d) {
          return a <= c;
        } else {
          return a >= c;
        }
      case "<=":
        if (d) {
          return a >= c;
        } else {
          return a <= c;
        }
    }
  };
  e.prototype.on = function (a, b, c, d) {
    if (a.addEventListener) {
      a.addEventListener(b, c, d);
    } else if (a.attachEvent) {
      a.attachEvent("on" + b, c);
    }
  };
  e.prototype.off = function (a, b, c, d) {
    if (a.removeEventListener) {
      a.removeEventListener(b, c, d);
    } else if (a.detachEvent) {
      a.detachEvent("on" + b, c);
    }
  };
  e.prototype.trigger = function (b, c, d, f, g) {
    var h = {
      item: {
        count: this._items.length,
        index: this.current()
      }
    };
    var i = a.camelCase(a.grep(["on", b, d], function (a) {
      return a;
    }).join("-").toLowerCase());
    var j = a.Event([b, "owl", d || "carousel"].join(".").toLowerCase(), a.extend({
      relatedTarget: this
    }, h, c));
    if (!this._supress[b]) {
      a.each(this._plugins, function (a, b) {
        if (b.onTrigger) {
          b.onTrigger(j);
        }
      });
      this.register({
        type: e.Type.Event,
        name: b
      });
      this.$element.trigger(j);
      if (this.settings && typeof this.settings[i] == "function") {
        this.settings[i].call(this, j);
      }
    }
    return j;
  };
  e.prototype.enter = function (b) {
    a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
      if (this._states.current[b] === d) {
        this._states.current[b] = 0;
      }
      this._states.current[b]++;
    }, this));
  };
  e.prototype.leave = function (b) {
    a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
      this._states.current[b]--;
    }, this));
  };
  e.prototype.register = function (b) {
    if (b.type === e.Type.Event) {
      a.event.special[b.name] ||= {};
      if (!a.event.special[b.name].owl) {
        var c = a.event.special[b.name]._default;
        a.event.special[b.name]._default = function (a) {
          if (!c || !c.apply || a.namespace && a.namespace.indexOf("owl") !== -1) {
            return a.namespace && a.namespace.indexOf("owl") > -1;
          } else {
            return c.apply(this, arguments);
          }
        };
        a.event.special[b.name].owl = true;
      }
    } else if (b.type === e.Type.State) {
      if (this._states.tags[b.name]) {
        this._states.tags[b.name] = this._states.tags[b.name].concat(b.tags);
      } else {
        this._states.tags[b.name] = b.tags;
      }
      this._states.tags[b.name] = a.grep(this._states.tags[b.name], a.proxy(function (c, d) {
        return a.inArray(c, this._states.tags[b.name]) === d;
      }, this));
    }
  };
  e.prototype.suppress = function (b) {
    a.each(b, a.proxy(function (a, b) {
      this._supress[b] = true;
    }, this));
  };
  e.prototype.release = function (b) {
    a.each(b, a.proxy(function (a, b) {
      delete this._supress[b];
    }, this));
  };
  e.prototype.pointer = function (a) {
    var c = {
      x: null,
      y: null
    };
    a = a.originalEvent || a || b.event;
    a = a.touches && a.touches.length ? a.touches[0] : a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : a;
    if (a.pageX) {
      c.x = a.pageX;
      c.y = a.pageY;
    } else {
      c.x = a.clientX;
      c.y = a.clientY;
    }
    return c;
  };
  e.prototype.isNumeric = function (a) {
    return !isNaN(parseFloat(a));
  };
  e.prototype.difference = function (a, b) {
    return {
      x: a.x - b.x,
      y: a.y - b.y
    };
  };
  a.fn.owlCarousel = function (b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return this.each(function () {
      var d = a(this);
      var f = d.data("owl.carousel");
      if (!f) {
        f = new e(this, typeof b == "object" && b);
        d.data("owl.carousel", f);
        a.each(["next", "prev", "to", "destroy", "refresh", "replace", "add", "remove"], function (b, c) {
          f.register({
            type: e.Type.Event,
            name: c
          });
          f.$element.on(c + ".owl.carousel.core", a.proxy(function (a) {
            if (a.namespace && a.relatedTarget !== this) {
              this.suppress([c]);
              f[c].apply(this, [].slice.call(arguments, 1));
              this.release([c]);
            }
          }, f));
        });
      }
      if (typeof b == "string" && b.charAt(0) !== "_") {
        f[b].apply(f, c);
      }
    });
  };
  a.fn.owlCarousel.Constructor = e;
})(window.Zepto || window.jQuery, window, document);
(function (a, b, c, d) {
  function e(b) {
    this._core = b;
    this._interval = null;
    this._visible = null;
    this._handlers = {
      "initialized.owl.carousel": a.proxy(function (a) {
        if (a.namespace && this._core.settings.autoRefresh) {
          this.watch();
        }
      }, this)
    };
    this._core.options = a.extend({}, e.Defaults, this._core.options);
    this._core.$element.on(this._handlers);
  }
  e.Defaults = {
    autoRefresh: true,
    autoRefreshInterval: 500
  };
  e.prototype.watch = function () {
    if (!this._interval) {
      this._visible = this._core.isVisible();
      this._interval = b.setInterval(a.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);
    }
  };
  e.prototype.refresh = function () {
    if (this._core.isVisible() !== this._visible) {
      this._visible = !this._visible;
      this._core.$element.toggleClass("owl-hidden", !this._visible);
      if (this._visible && this._core.invalidate("width")) {
        this._core.refresh();
      }
    }
  };
  e.prototype.destroy = function () {
    var a;
    var c;
    b.clearInterval(this._interval);
    for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }
    for (c in Object.getOwnPropertyNames(this)) {
      if (typeof this[c] != "function") {
        this[c] = null;
      }
    }
  };
  a.fn.owlCarousel.Constructor.Plugins.AutoRefresh = e;
})(window.Zepto || window.jQuery, window, document);
(function (a, b, c, d) {
  function e(b) {
    this._core = b;
    this._loaded = [];
    this._handlers = {
      "initialized.owl.carousel change.owl.carousel resized.owl.carousel": a.proxy(function (b) {
        if (b.namespace && this._core.settings && this._core.settings.lazyLoad && (b.property && b.property.name == "position" || b.type == "initialized")) {
          var c = this._core.settings;
          var e = c.center && Math.ceil(c.items / 2) || c.items;
          var f = c.center && e * -1 || 0;
          var g = (b.property && b.property.value !== d ? b.property.value : this._core.current()) + f;
          var h = this._core.clones().length;
          var i = a.proxy(function (a, b) {
            this.load(b);
          }, this);
          for (c.lazyLoadEager > 0 && (e += c.lazyLoadEager, c.loop && (g -= c.lazyLoadEager, e++)); f++ < e;) {
            this.load(h / 2 + this._core.relative(g));
            if (h) {
              a.each(this._core.clones(this._core.relative(g)), i);
            }
            g++;
          }
        }
      }, this)
    };
    this._core.options = a.extend({}, e.Defaults, this._core.options);
    this._core.$element.on(this._handlers);
  }
  e.Defaults = {
    lazyLoad: false,
    lazyLoadEager: 0
  };
  e.prototype.load = function (c) {
    var d = this._core.$stage.children().eq(c);
    var e = d && d.find(".owl-lazy");
    if (!!e && !(a.inArray(d.get(0), this._loaded) > -1)) {
      e.each(a.proxy(function (c, d) {
        var e;
        var f = a(d);
        var g = b.devicePixelRatio > 1 && f.attr("data-src-retina") || f.attr("data-src") || f.attr("data-srcset");
        this._core.trigger("load", {
          element: f,
          url: g
        }, "lazy");
        if (f.is("img")) {
          f.one("load.owl.lazy", a.proxy(function () {
            f.css("opacity", 1);
            this._core.trigger("loaded", {
              element: f,
              url: g
            }, "lazy");
          }, this)).attr("src", g);
        } else if (f.is("source")) {
          f.one("load.owl.lazy", a.proxy(function () {
            this._core.trigger("loaded", {
              element: f,
              url: g
            }, "lazy");
          }, this)).attr("srcset", g);
        } else {
          e = new Image();
          e.onload = a.proxy(function () {
            f.css({
              "background-image": "url(\"" + g + "\")",
              opacity: "1"
            });
            this._core.trigger("loaded", {
              element: f,
              url: g
            }, "lazy");
          }, this);
          e.src = g;
        }
      }, this));
      this._loaded.push(d.get(0));
    }
  };
  e.prototype.destroy = function () {
    var a;
    var b;
    for (a in this.handlers) {
      this._core.$element.off(a, this.handlers[a]);
    }
    for (b in Object.getOwnPropertyNames(this)) {
      if (typeof this[b] != "function") {
        this[b] = null;
      }
    }
  };
  a.fn.owlCarousel.Constructor.Plugins.Lazy = e;
})(window.Zepto || window.jQuery, window, document);
(function (a, b, c, d) {
  function e(c) {
    this._core = c;
    this._previousHeight = null;
    this._handlers = {
      "initialized.owl.carousel refreshed.owl.carousel": a.proxy(function (a) {
        if (a.namespace && this._core.settings.autoHeight) {
          this.update();
        }
      }, this),
      "changed.owl.carousel": a.proxy(function (a) {
        if (a.namespace && this._core.settings.autoHeight && a.property.name === "position") {
          this.update();
        }
      }, this),
      "loaded.owl.lazy": a.proxy(function (a) {
        if (a.namespace && this._core.settings.autoHeight && a.element.closest("." + this._core.settings.itemClass).index() === this._core.current()) {
          this.update();
        }
      }, this)
    };
    this._core.options = a.extend({}, e.Defaults, this._core.options);
    this._core.$element.on(this._handlers);
    this._intervalId = null;
    var d = this;
    a(b).on("load", function () {
      if (d._core.settings.autoHeight) {
        d.update();
      }
    });
    a(b).resize(function () {
      if (d._core.settings.autoHeight) {
        if (d._intervalId != null) {
          clearTimeout(d._intervalId);
        }
        d._intervalId = setTimeout(function () {
          d.update();
        }, 250);
      }
    });
  }
  e.Defaults = {
    autoHeight: false,
    autoHeightClass: "owl-height"
  };
  e.prototype.update = function () {
    var b = this._core._current;
    var c = b + this._core.settings.items;
    var d = this._core.settings.lazyLoad;
    var e = this._core.$stage.children().toArray().slice(b, c);
    var f = [];
    var g = 0;
    a.each(e, function (b, c) {
      f.push(a(c).height());
    });
    g = Math.max.apply(null, f);
    if (g <= 1 && d && this._previousHeight) {
      g = this._previousHeight;
    }
    this._previousHeight = g;
    this._core.$stage.parent().height(g).addClass(this._core.settings.autoHeightClass);
  };
  e.prototype.destroy = function () {
    var a;
    var b;
    for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }
    for (b in Object.getOwnPropertyNames(this)) {
      if (typeof this[b] != "function") {
        this[b] = null;
      }
    }
  };
  a.fn.owlCarousel.Constructor.Plugins.AutoHeight = e;
})(window.Zepto || window.jQuery, window, document);
(function (a, b, c, d) {
  function e(b) {
    this._core = b;
    this._videos = {};
    this._playing = null;
    this._handlers = {
      "initialized.owl.carousel": a.proxy(function (a) {
        if (a.namespace) {
          this._core.register({
            type: "state",
            name: "playing",
            tags: ["interacting"]
          });
        }
      }, this),
      "resize.owl.carousel": a.proxy(function (a) {
        if (a.namespace && this._core.settings.video && this.isInFullScreen()) {
          a.preventDefault();
        }
      }, this),
      "refreshed.owl.carousel": a.proxy(function (a) {
        if (a.namespace && this._core.is("resizing")) {
          this._core.$stage.find(".cloned .owl-video-frame").remove();
        }
      }, this),
      "changed.owl.carousel": a.proxy(function (a) {
        if (a.namespace && a.property.name === "position" && this._playing) {
          this.stop();
        }
      }, this),
      "prepared.owl.carousel": a.proxy(function (b) {
        if (b.namespace) {
          var c = a(b.content).find(".owl-video");
          if (c.length) {
            c.css("display", "none");
            this.fetch(c, a(b.content));
          }
        }
      }, this)
    };
    this._core.options = a.extend({}, e.Defaults, this._core.options);
    this._core.$element.on(this._handlers);
    this._core.$element.on("click.owl.video", ".owl-video-play-icon", a.proxy(function (a) {
      this.play(a);
    }, this));
  }
  e.Defaults = {
    video: false,
    videoHeight: false,
    videoWidth: false
  };
  e.prototype.fetch = function (a, b) {
    var c = function () {
      if (a.attr("data-vimeo-id")) {
        return "vimeo";
      } else if (a.attr("data-vzaar-id")) {
        return "vzaar";
      } else {
        return "youtube";
      }
    }();
    var d = a.attr("data-vimeo-id") || a.attr("data-youtube-id") || a.attr("data-vzaar-id");
    var e = a.attr("data-width") || this._core.settings.videoWidth;
    var f = a.attr("data-height") || this._core.settings.videoHeight;
    var g = a.attr("href");
    if (!g) {
      throw new Error("Missing video URL.");
    }
    d = g.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/);
    if (d[3].indexOf("youtu") > -1) {
      c = "youtube";
    } else if (d[3].indexOf("vimeo") > -1) {
      c = "vimeo";
    } else {
      if (!(d[3].indexOf("vzaar") > -1)) {
        throw new Error("Video URL not supported.");
      }
      c = "vzaar";
    }
    d = d[6];
    this._videos[g] = {
      type: c,
      id: d,
      width: e,
      height: f
    };
    b.attr("data-video", g);
    this.thumbnail(a, this._videos[g]);
  };
  e.prototype.thumbnail = function (b, c) {
    var d;
    var e;
    var f;
    var g = c.width && c.height ? "width:" + c.width + "px;height:" + c.height + "px;" : "";
    var h = b.find("img");
    var i = "src";
    var j = "";
    var k = this._core.settings;
    function l(c) {
      e = "<div class=\"owl-video-play-icon\"></div>";
      d = k.lazyLoad ? a("<div/>", {
        class: "owl-video-tn " + j,
        srcType: c
      }) : a("<div/>", {
        class: "owl-video-tn",
        style: "opacity:1;background-image:url(" + c + ")"
      });
      b.after(d);
      b.after(e);
    }
    b.wrap(a("<div/>", {
      class: "owl-video-wrapper",
      style: g
    }));
    if (this._core.settings.lazyLoad) {
      i = "data-src";
      j = "owl-lazy";
    }
    if (h.length) {
      l(h.attr(i));
      h.remove();
      return false;
    }
    if (c.type === "youtube") {
      f = "//img.youtube.com/vi/" + c.id + "/hqdefault.jpg";
      l(f);
    } else if (c.type === "vimeo") {
      a.ajax({
        type: "GET",
        url: "//vimeo.com/api/v2/video/" + c.id + ".json",
        jsonp: "callback",
        dataType: "jsonp",
        success: function (a) {
          f = a[0].thumbnail_large;
          l(f);
        }
      });
    } else if (c.type === "vzaar") {
      a.ajax({
        type: "GET",
        url: "//vzaar.com/api/videos/" + c.id + ".json",
        jsonp: "callback",
        dataType: "jsonp",
        success: function (a) {
          f = a.framegrab_url;
          l(f);
        }
      });
    }
  };
  e.prototype.stop = function () {
    this._core.trigger("stop", null, "video");
    this._playing.find(".owl-video-frame").remove();
    this._playing.removeClass("owl-video-playing");
    this._playing = null;
    this._core.leave("playing");
    this._core.trigger("stopped", null, "video");
  };
  e.prototype.play = function (b) {
    var c;
    var d = a(b.target);
    var e = d.closest("." + this._core.settings.itemClass);
    var f = this._videos[e.attr("data-video")];
    var g = f.width || "100%";
    var h = f.height || this._core.$stage.height();
    if (!this._playing) {
      this._core.enter("playing");
      this._core.trigger("play", null, "video");
      e = this._core.items(this._core.relative(e.index()));
      this._core.reset(e.index());
      c = a("<iframe frameborder=\"0\" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>");
      c.attr("height", h);
      c.attr("width", g);
      if (f.type === "youtube") {
        c.attr("src", "//www.youtube.com/embed/" + f.id + "?autoplay=1&rel=0&v=" + f.id);
      } else if (f.type === "vimeo") {
        c.attr("src", "//player.vimeo.com/video/" + f.id + "?autoplay=1");
      } else if (f.type === "vzaar") {
        c.attr("src", "//view.vzaar.com/" + f.id + "/player?autoplay=true");
      }
      a(c).wrap("<div class=\"owl-video-frame\" />").insertAfter(e.find(".owl-video"));
      this._playing = e.addClass("owl-video-playing");
    }
  };
  e.prototype.isInFullScreen = function () {
    var b = c.fullscreenElement || c.mozFullScreenElement || c.webkitFullscreenElement;
    return b && a(b).parent().hasClass("owl-video-frame");
  };
  e.prototype.destroy = function () {
    var a;
    var b;
    this._core.$element.off("click.owl.video");
    for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }
    for (b in Object.getOwnPropertyNames(this)) {
      if (typeof this[b] != "function") {
        this[b] = null;
      }
    }
  };
  a.fn.owlCarousel.Constructor.Plugins.Video = e;
})(window.Zepto || window.jQuery, window, document);
(function (a, b, c, d) {
  function e(b) {
    this.core = b;
    this.core.options = a.extend({}, e.Defaults, this.core.options);
    this.swapping = true;
    this.previous = d;
    this.next = d;
    this.handlers = {
      "change.owl.carousel": a.proxy(function (a) {
        if (a.namespace && a.property.name == "position") {
          this.previous = this.core.current();
          this.next = a.property.value;
        }
      }, this),
      "drag.owl.carousel dragged.owl.carousel translated.owl.carousel": a.proxy(function (a) {
        if (a.namespace) {
          this.swapping = a.type == "translated";
        }
      }, this),
      "translate.owl.carousel": a.proxy(function (a) {
        if (a.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {
          this.swap();
        }
      }, this)
    };
    this.core.$element.on(this.handlers);
  }
  e.Defaults = {
    animateOut: false,
    animateIn: false
  };
  e.prototype.swap = function () {
    if (this.core.settings.items === 1 && a.support.animation && a.support.transition) {
      this.core.speed(0);
      var b;
      var c = a.proxy(this.clear, this);
      var d = this.core.$stage.children().eq(this.previous);
      var e = this.core.$stage.children().eq(this.next);
      var f = this.core.settings.animateIn;
      var g = this.core.settings.animateOut;
      if (this.core.current() !== this.previous) {
        if (g) {
          b = this.core.coordinates(this.previous) - this.core.coordinates(this.next);
          d.one(a.support.animation.end, c).css({
            left: b + "px"
          }).addClass("animated owl-animated-out").addClass(g);
        }
        if (f) {
          e.one(a.support.animation.end, c).addClass("animated owl-animated-in").addClass(f);
        }
      }
    }
  };
  e.prototype.clear = function (b) {
    a(b.target).css({
      left: ""
    }).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut);
    this.core.onTransitionEnd();
  };
  e.prototype.destroy = function () {
    var a;
    var b;
    for (a in this.handlers) {
      this.core.$element.off(a, this.handlers[a]);
    }
    for (b in Object.getOwnPropertyNames(this)) {
      if (typeof this[b] != "function") {
        this[b] = null;
      }
    }
  };
  a.fn.owlCarousel.Constructor.Plugins.Animate = e;
})(window.Zepto || window.jQuery, window, document);
(function (a, b, c, d) {
  function e(b) {
    this._core = b;
    this._call = null;
    this._time = 0;
    this._timeout = 0;
    this._paused = true;
    this._handlers = {
      "changed.owl.carousel": a.proxy(function (a) {
        if (a.namespace && a.property.name === "settings") {
          if (this._core.settings.autoplay) {
            this.play();
          } else {
            this.stop();
          }
        } else if (a.namespace && a.property.name === "position" && this._paused) {
          this._time = 0;
        }
      }, this),
      "initialized.owl.carousel": a.proxy(function (a) {
        if (a.namespace && this._core.settings.autoplay) {
          this.play();
        }
      }, this),
      "play.owl.autoplay": a.proxy(function (a, b, c) {
        if (a.namespace) {
          this.play(b, c);
        }
      }, this),
      "stop.owl.autoplay": a.proxy(function (a) {
        if (a.namespace) {
          this.stop();
        }
      }, this),
      "mouseover.owl.autoplay": a.proxy(function () {
        if (this._core.settings.autoplayHoverPause && this._core.is("rotating")) {
          this.pause();
        }
      }, this),
      "mouseleave.owl.autoplay": a.proxy(function () {
        if (this._core.settings.autoplayHoverPause && this._core.is("rotating")) {
          this.play();
        }
      }, this),
      "touchstart.owl.core": a.proxy(function () {
        if (this._core.settings.autoplayHoverPause && this._core.is("rotating")) {
          this.pause();
        }
      }, this),
      "touchend.owl.core": a.proxy(function () {
        if (this._core.settings.autoplayHoverPause) {
          this.play();
        }
      }, this)
    };
    this._core.$element.on(this._handlers);
    this._core.options = a.extend({}, e.Defaults, this._core.options);
  }
  e.Defaults = {
    autoplay: false,
    autoplayTimeout: 5000,
    autoplayHoverPause: false,
    autoplaySpeed: false
  };
  e.prototype._next = function (d) {
    this._call = b.setTimeout(a.proxy(this._next, this, d), this._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read());
    if (!this._core.is("interacting") && !c.hidden) {
      this._core.next(d || this._core.settings.autoplaySpeed);
    }
  };
  e.prototype.read = function () {
    return new Date().getTime() - this._time;
  };
  e.prototype.play = function (c, d) {
    var e;
    if (!this._core.is("rotating")) {
      this._core.enter("rotating");
    }
    c = c || this._core.settings.autoplayTimeout;
    e = Math.min(this._time % (this._timeout || c), c);
    if (this._paused) {
      this._time = this.read();
      this._paused = false;
    } else {
      b.clearTimeout(this._call);
    }
    this._time += this.read() % c - e;
    this._timeout = c;
    this._call = b.setTimeout(a.proxy(this._next, this, d), c - e);
  };
  e.prototype.stop = function () {
    if (this._core.is("rotating")) {
      this._time = 0;
      this._paused = true;
      b.clearTimeout(this._call);
      this._core.leave("rotating");
    }
  };
  e.prototype.pause = function () {
    if (this._core.is("rotating") && !this._paused) {
      this._time = this.read();
      this._paused = true;
      b.clearTimeout(this._call);
    }
  };
  e.prototype.destroy = function () {
    var a;
    var b;
    this.stop();
    for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }
    for (b in Object.getOwnPropertyNames(this)) {
      if (typeof this[b] != "function") {
        this[b] = null;
      }
    }
  };
  a.fn.owlCarousel.Constructor.Plugins.autoplay = e;
})(window.Zepto || window.jQuery, window, document);
(function (a, b, c, d) {
  "use strict";

  function e(b) {
    this._core = b;
    this._initialized = false;
    this._pages = [];
    this._controls = {};
    this._templates = [];
    this.$element = this._core.$element;
    this._overrides = {
      next: this._core.next,
      prev: this._core.prev,
      to: this._core.to
    };
    this._handlers = {
      "prepared.owl.carousel": a.proxy(function (b) {
        if (b.namespace && this._core.settings.dotsData) {
          this._templates.push("<div class=\"" + this._core.settings.dotClass + "\">" + a(b.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot") + "</div>");
        }
      }, this),
      "added.owl.carousel": a.proxy(function (a) {
        if (a.namespace && this._core.settings.dotsData) {
          this._templates.splice(a.position, 0, this._templates.pop());
        }
      }, this),
      "remove.owl.carousel": a.proxy(function (a) {
        if (a.namespace && this._core.settings.dotsData) {
          this._templates.splice(a.position, 1);
        }
      }, this),
      "changed.owl.carousel": a.proxy(function (a) {
        if (a.namespace && a.property.name == "position") {
          this.draw();
        }
      }, this),
      "initialized.owl.carousel": a.proxy(function (a) {
        if (a.namespace && !this._initialized) {
          this._core.trigger("initialize", null, "navigation");
          this.initialize();
          this.update();
          this.draw();
          this._initialized = true;
          this._core.trigger("initialized", null, "navigation");
        }
      }, this),
      "refreshed.owl.carousel": a.proxy(function (a) {
        if (a.namespace && this._initialized) {
          this._core.trigger("refresh", null, "navigation");
          this.update();
          this.draw();
          this._core.trigger("refreshed", null, "navigation");
        }
      }, this)
    };
    this._core.options = a.extend({}, e.Defaults, this._core.options);
    this.$element.on(this._handlers);
  }
  e.Defaults = {
    nav: false,
    navText: ["<span aria-label=\"Previous\">&#x2039;</span>", "<span aria-label=\"Next\">&#x203a;</span>"],
    nGasparpeed: false,
    navElement: "button type=\"button\" role=\"presentation\"",
    navContainer: false,
    navContainerClass: "owl-nav",
    navClass: ["owl-prev", "owl-next"],
    slideBy: 1,
    dotClass: "owl-dot",
    dotsClass: "owl-dots",
    dots: true,
    dotsEach: false,
    dotsData: false,
    dotsSpeed: false,
    dotsContainer: false
  };
  e.prototype.initialize = function () {
    var b;
    var c = this._core.settings;
    this._controls.$relative = (c.navContainer ? a(c.navContainer) : a("<div>").addClass(c.navContainerClass).appendTo(this.$element)).addClass("disabled");
    this._controls.$previous = a("<" + c.navElement + ">").addClass(c.navClass[0]).html(c.navText[0]).prependTo(this._controls.$relative).on("click", a.proxy(function (a) {
      this.prev(c.nGasparpeed);
    }, this));
    this._controls.$next = a("<" + c.navElement + ">").addClass(c.navClass[1]).html(c.navText[1]).appendTo(this._controls.$relative).on("click", a.proxy(function (a) {
      this.next(c.nGasparpeed);
    }, this));
    if (!c.dotsData) {
      this._templates = [a("<button role=\"button\">").addClass(c.dotClass).append(a("<span>")).prop("outerHTML")];
    }
    this._controls.$absolute = (c.dotsContainer ? a(c.dotsContainer) : a("<div>").addClass(c.dotsClass).appendTo(this.$element)).addClass("disabled");
    this._controls.$absolute.on("click", "button", a.proxy(function (b) {
      var d = a(b.target).parent().is(this._controls.$absolute) ? a(b.target).index() : a(b.target).parent().index();
      b.preventDefault();
      this.to(d, c.dotsSpeed);
    }, this));
    for (b in this._overrides) {
      this._core[b] = a.proxy(this[b], this);
    }
  };
  e.prototype.destroy = function () {
    var a;
    var b;
    var c;
    var d;
    var e;
    e = this._core.settings;
    for (a in this._handlers) {
      this.$element.off(a, this._handlers[a]);
    }
    for (b in this._controls) {
      if (b === "$relative" && e.navContainer) {
        this._controls[b].html("");
      } else {
        this._controls[b].remove();
      }
    }
    for (d in this.overides) {
      this._core[d] = this._overrides[d];
    }
    for (c in Object.getOwnPropertyNames(this)) {
      if (typeof this[c] != "function") {
        this[c] = null;
      }
    }
  };
  e.prototype.update = function () {
    var a;
    var b;
    var c;
    var d = this._core.clones().length / 2;
    var e = d + this._core.items().length;
    var f = this._core.maximum(true);
    var g = this._core.settings;
    var h = g.center || g.autoWidth || g.dotsData ? 1 : g.dotsEach || g.items;
    if (g.slideBy !== "page") {
      g.slideBy = Math.min(g.slideBy, g.items);
    }
    if (g.dots || g.slideBy == "page") {
      this._pages = [];
      a = d;
      b = 0;
      c = 0;
      for (; a < e; a++) {
        if (b >= h || b === 0) {
          this._pages.push({
            start: Math.min(f, a - d),
            end: a - d + h - 1
          });
          if (Math.min(f, a - d) === f) {
            break;
          }
          b = 0;
          ++c;
        }
        b += this._core.mergers(this._core.relative(a));
      }
    }
  };
  e.prototype.draw = function () {
    var b;
    var c = this._core.settings;
    var d = this._core.items().length <= c.items;
    var e = this._core.relative(this._core.current());
    var f = c.loop || c.rewind;
    this._controls.$relative.toggleClass("disabled", !c.nav || d);
    if (c.nav) {
      this._controls.$previous.toggleClass("disabled", !f && e <= this._core.minimum(true));
      this._controls.$next.toggleClass("disabled", !f && e >= this._core.maximum(true));
    }
    this._controls.$absolute.toggleClass("disabled", !c.dots || d);
    if (c.dots) {
      b = this._pages.length - this._controls.$absolute.children().length;
      if (c.dotsData && b !== 0) {
        this._controls.$absolute.html(this._templates.join(""));
      } else if (b > 0) {
        this._controls.$absolute.append(new Array(b + 1).join(this._templates[0]));
      } else if (b < 0) {
        this._controls.$absolute.children().slice(b).remove();
      }
      this._controls.$absolute.find(".active").removeClass("active");
      this._controls.$absolute.children().eq(a.inArray(this.current(), this._pages)).addClass("active");
    }
  };
  e.prototype.onTrigger = function (b) {
    var c = this._core.settings;
    b.page = {
      index: a.inArray(this.current(), this._pages),
      count: this._pages.length,
      size: c && (c.center || c.autoWidth || c.dotsData ? 1 : c.dotsEach || c.items)
    };
  };
  e.prototype.current = function () {
    var b = this._core.relative(this._core.current());
    return a.grep(this._pages, a.proxy(function (a, c) {
      return a.start <= b && a.end >= b;
    }, this)).pop();
  };
  e.prototype.getPosition = function (b) {
    var c;
    var d;
    var e = this._core.settings;
    if (e.slideBy == "page") {
      c = a.inArray(this.current(), this._pages);
      d = this._pages.length;
      if (b) {
        ++c;
      } else {
        --c;
      }
      c = this._pages[(c % d + d) % d].start;
    } else {
      c = this._core.relative(this._core.current());
      d = this._core.items().length;
      if (b) {
        c += e.slideBy;
      } else {
        c -= e.slideBy;
      }
    }
    return c;
  };
  e.prototype.next = function (b) {
    a.proxy(this._overrides.to, this._core)(this.getPosition(true), b);
  };
  e.prototype.prev = function (b) {
    a.proxy(this._overrides.to, this._core)(this.getPosition(false), b);
  };
  e.prototype.to = function (b, c, d) {
    var e;
    if (!d && this._pages.length) {
      e = this._pages.length;
      a.proxy(this._overrides.to, this._core)(this._pages[(b % e + e) % e].start, c);
    } else {
      a.proxy(this._overrides.to, this._core)(b, c);
    }
  };
  a.fn.owlCarousel.Constructor.Plugins.Navigation = e;
})(window.Zepto || window.jQuery, window, document);
(function (a, b, c, d) {
  "use strict";

  function e(c) {
    this._core = c;
    this._hashes = {};
    this.$element = this._core.$element;
    this._handlers = {
      "initialized.owl.carousel": a.proxy(function (c) {
        if (c.namespace && this._core.settings.startPosition === "URLHash") {
          a(b).trigger("hashchange.owl.navigation");
        }
      }, this),
      "prepared.owl.carousel": a.proxy(function (b) {
        if (b.namespace) {
          var c = a(b.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");
          if (!c) {
            return;
          }
          this._hashes[c] = b.content;
        }
      }, this),
      "changed.owl.carousel": a.proxy(function (c) {
        if (c.namespace && c.property.name === "position") {
          var d = this._core.items(this._core.relative(this._core.current()));
          var e = a.map(this._hashes, function (a, b) {
            if (a === d) {
              return b;
            } else {
              return null;
            }
          }).join();
          if (!e || b.location.hash.slice(1) === e) {
            return;
          }
          b.location.hash = e;
        }
      }, this)
    };
    this._core.options = a.extend({}, e.Defaults, this._core.options);
    this.$element.on(this._handlers);
    a(b).on("hashchange.owl.navigation", a.proxy(function (a) {
      var c = b.location.hash.substring(1);
      var e = this._core.$stage.children();
      var f = this._hashes[c] && e.index(this._hashes[c]);
      if (f !== d && f !== this._core.current()) {
        this._core.to(this._core.relative(f), false, true);
      }
    }, this));
  }
  e.Defaults = {
    URLhashListener: false
  };
  e.prototype.destroy = function () {
    var c;
    var d;
    a(b).off("hashchange.owl.navigation");
    for (c in this._handlers) {
      this._core.$element.off(c, this._handlers[c]);
    }
    for (d in Object.getOwnPropertyNames(this)) {
      if (typeof this[d] != "function") {
        this[d] = null;
      }
    }
  };
  a.fn.owlCarousel.Constructor.Plugins.Hash = e;
})(window.Zepto || window.jQuery, window, document);
(function (a, b, c, d) {
  function e(b, c) {
    var e = false;
    var f = b.charAt(0).toUpperCase() + b.slice(1);
    a.each((b + " " + h.join(f + " ") + f).split(" "), function (a, b) {
      if (g[b] !== d) {
        e = !c || b;
        return false;
      }
    });
    return e;
  }
  function f(a) {
    return e(a, true);
  }
  var g = a("<support>").get(0).style;
  var h = "Webkit Moz O ms".split(" ");
  var i = {
    transition: {
      end: {
        WebkitTransition: "webkitTransitionEnd",
        MozTransition: "transitionend",
        OTransition: "oTransitionEnd",
        transition: "transitionend"
      }
    },
    animation: {
      end: {
        WebkitAnimation: "webkitAnimationEnd",
        MozAnimation: "animationend",
        OAnimation: "oAnimationEnd",
        animation: "animationend"
      }
    }
  };
  var j = {
    csstransforms: function () {
      return !!e("transform");
    },
    csstransforms3d: function () {
      return !!e("perspective");
    },
    csstransitions: function () {
      return !!e("transition");
    },
    cssanimations: function () {
      return !!e("animation");
    }
  };
  if (j.csstransitions()) {
    a.support.transition = new String(f("transition"));
    a.support.transition.end = i.transition.end[a.support.transition];
  }
  if (j.cssanimations()) {
    a.support.animation = new String(f("animation"));
    a.support.animation.end = i.animation.end[a.support.animation];
  }
  if (j.csstransforms()) {
    a.support.transform = new String(f("transform"));
    a.support.transform3d = j.csstransforms3d();
  }
})(window.Zepto || window.jQuery, window, document);
