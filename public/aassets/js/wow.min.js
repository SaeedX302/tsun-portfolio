/*! WOW wow.js - v1.3.0 - 2016-10-04
* https://wowjs.uk
* Copyright (c) 2016 Thomas Grainger; Licensed MIT */
(function (a, b) {
  if (typeof define == "function" && define.amd) {
    define(["module", "exports"], b);
  } else if (typeof exports != "undefined") {
    b(module, exports);
  } else {
    var c = {
      exports: {}
    };
    b(c, c.exports);
    a.WOW = c.exports;
  }
})(this, function (a, b) {
  "use strict";

  function c(a, b) {
    if (!(a instanceof b)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function d(a, b) {
    return b.indexOf(a) >= 0;
  }
  function e(a, b) {
    for (var c in b) {
      if (a[c] == null) {
        var d = b[c];
        a[c] = d;
      }
    }
    return a;
  }
  function f(a) {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(a);
  }
  function g(a) {
    var b = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
    var c = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
    var d = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
    var e = undefined;
    if (document.createEvent != null) {
      e = document.createEvent("CustomEvent");
      e.initCustomEvent(a, b, c, d);
    } else if (document.createEventObject != null) {
      e = document.createEventObject();
      e.eventType = a;
    } else {
      e.eventName = a;
    }
    return e;
  }
  function h(a, b) {
    if (a.dispatchEvent != null) {
      a.dispatchEvent(b);
    } else if (b in (a != null)) {
      a[b]();
    } else if ("on" + b in (a != null)) {
      a["on" + b]();
    }
  }
  function i(a, b, c) {
    if (a.addEventListener != null) {
      a.addEventListener(b, c, false);
    } else if (a.attachEvent != null) {
      a.attachEvent("on" + b, c);
    } else {
      a[b] = c;
    }
  }
  function j(a, b, c) {
    if (a.removeEventListener != null) {
      a.removeEventListener(b, c, false);
    } else if (a.detachEvent != null) {
      a.detachEvent("on" + b, c);
    } else {
      delete a[b];
    }
  }
  function k() {
    if ("innerHeight" in window) {
      return window.innerHeight;
    } else {
      return document.documentElement.clientHeight;
    }
  }
  Object.defineProperty(b, "__esModule", {
    value: true
  });
  var l;
  var m;
  var n = function () {
    function a(a, b) {
      for (var c = 0; c < b.length; c++) {
        var d = b[c];
        d.enumerable = d.enumerable || false;
        d.configurable = true;
        if ("value" in d) {
          d.writable = true;
        }
        Object.defineProperty(a, d.key, d);
      }
    }
    return function (b, c, d) {
      if (c) {
        a(b.prototype, c);
      }
      if (d) {
        a(b, d);
      }
      return b;
    };
  }();
  var o = window.WeakMap || window.MozWeakMap || function () {
    function a() {
      c(this, a);
      this.keys = [];
      this.values = [];
    }
    n(a, [{
      key: "get",
      value: function (a) {
        for (var b = 0; b < this.keys.length; b++) {
          var c = this.keys[b];
          if (c === a) {
            return this.values[b];
          }
        }
      }
    }, {
      key: "set",
      value: function (a, b) {
        for (var c = 0; c < this.keys.length; c++) {
          var d = this.keys[c];
          if (d === a) {
            this.values[c] = b;
            return this;
          }
        }
        this.keys.push(a);
        this.values.push(b);
        return this;
      }
    }]);
    return a;
  }();
  var p = window.MutationObserver || window.WebkitMutationObserver || window.MozMutationObserver || (m = l = function () {
    function a() {
      c(this, a);
      if (typeof console != "undefined" && console !== null) {
        console.warn("MutationObserver is not supported by your browser.");
        console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.");
      }
    }
    n(a, [{
      key: "observe",
      value: function () {}
    }]);
    return a;
  }(), l.notSupported = true, m);
  var q = window.getComputedStyle || function (a) {
    var b = /(\-([a-z]){1})/g;
    return {
      getPropertyValue: function (c) {
        if (c === "float") {
          c = "styleFloat";
        }
        if (b.test(c)) {
          c.replace(b, function (a, b) {
            return b.toUpperCase();
          });
        }
        var d = a.currentStyle;
        return (d != null ? d[c] : undefined) || null;
      }
    };
  };
  var r = function () {
    function a() {
      var b = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      c(this, a);
      this.defaults = {
        boxClass: "wow",
        animateClass: "animated",
        offset: 0,
        mobile: true,
        live: true,
        callback: null,
        scrollContainer: null,
        resetAnimation: true
      };
      this.animate = function () {
        if ("requestAnimationFrame" in window) {
          return function (a) {
            return window.requestAnimationFrame(a);
          };
        } else {
          return function (a) {
            return a();
          };
        }
      }();
      this.vendors = ["moz", "webkit"];
      this.start = this.start.bind(this);
      this.resetAnimation = this.resetAnimation.bind(this);
      this.scrollHandler = this.scrollHandler.bind(this);
      this.scrollCallback = this.scrollCallback.bind(this);
      this.scrolled = true;
      this.config = e(b, this.defaults);
      if (b.scrollContainer != null) {
        this.config.scrollContainer = document.querySelector(b.scrollContainer);
      }
      this.animationNameCache = new o();
      this.wowEvent = g(this.config.boxClass);
    }
    n(a, [{
      key: "init",
      value: function () {
        this.element = window.document.documentElement;
        if (d(document.readyState, ["interactive", "complete"])) {
          this.start();
        } else {
          i(document, "DOMContentLoaded", this.start);
        }
        this.finished = [];
      }
    }, {
      key: "start",
      value: function () {
        var a = this;
        this.stopped = false;
        this.boxes = [].slice.call(this.element.querySelectorAll("." + this.config.boxClass));
        this.all = this.boxes.slice(0);
        if (this.boxes.length) {
          if (this.disabled()) {
            this.resetStyle();
          } else {
            for (var b = 0; b < this.boxes.length; b++) {
              var c = this.boxes[b];
              this.applyStyle(c, true);
            }
          }
        }
        if (!this.disabled()) {
          i(this.config.scrollContainer || window, "scroll", this.scrollHandler);
          i(window, "resize", this.scrollHandler);
          this.interval = setInterval(this.scrollCallback, 50);
        }
        if (this.config.live) {
          var d = new p(function (b) {
            for (var c = 0; c < b.length; c++) {
              for (var d = b[c], e = 0; e < d.addedNodes.length; e++) {
                var f = d.addedNodes[e];
                a.doSync(f);
              }
            }
          });
          d.observe(document.body, {
            childList: true,
            subtree: true
          });
        }
      }
    }, {
      key: "stop",
      value: function () {
        this.stopped = true;
        j(this.config.scrollContainer || window, "scroll", this.scrollHandler);
        j(window, "resize", this.scrollHandler);
        if (this.interval != null) {
          clearInterval(this.interval);
        }
      }
    }, {
      key: "sync",
      value: function () {
        if (p.notSupported) {
          this.doSync(this.element);
        }
      }
    }, {
      key: "doSync",
      value: function (a) {
        if (typeof a == "undefined" || a === null) {
          a = this.element;
        }
        if (a.nodeType === 1) {
          a = a.parentNode || a;
          for (var b = a.querySelectorAll("." + this.config.boxClass), c = 0; c < b.length; c++) {
            var e = b[c];
            if (!d(e, this.all)) {
              this.boxes.push(e);
              this.all.push(e);
              if (this.stopped || this.disabled()) {
                this.resetStyle();
              } else {
                this.applyStyle(e, true);
              }
              this.scrolled = true;
            }
          }
        }
      }
    }, {
      key: "show",
      value: function (a) {
        this.applyStyle(a);
        a.className = a.className + " " + this.config.animateClass;
        if (this.config.callback != null) {
          this.config.callback(a);
        }
        h(a, this.wowEvent);
        if (this.config.resetAnimation) {
          i(a, "animationend", this.resetAnimation);
          i(a, "oanimationend", this.resetAnimation);
          i(a, "webkitAnimationEnd", this.resetAnimation);
          i(a, "MSAnimationEnd", this.resetAnimation);
        }
        return a;
      }
    }, {
      key: "applyStyle",
      value: function (a, b) {
        var c = this;
        var d = a.getAttribute("data-wow-duration");
        var e = a.getAttribute("data-wow-delay");
        var f = a.getAttribute("data-wow-iteration");
        return this.animate(function () {
          return c.customStyle(a, b, d, e, f);
        });
      }
    }, {
      key: "resetStyle",
      value: function () {
        for (var a = 0; a < this.boxes.length; a++) {
          var b = this.boxes[a];
          b.style.visibility = "visible";
        }
      }
    }, {
      key: "resetAnimation",
      value: function (a) {
        if (a.type.toLowerCase().indexOf("animationend") >= 0) {
          var b = a.target || a.srcElement;
          b.className = b.className.replace(this.config.animateClass, "").trim();
        }
      }
    }, {
      key: "customStyle",
      value: function (a, b, c, d, e) {
        if (b) {
          this.cacheAnimationName(a);
        }
        a.style.visibility = b ? "hidden" : "visible";
        if (c) {
          this.vendorSet(a.style, {
            animationDuration: c
          });
        }
        if (d) {
          this.vendorSet(a.style, {
            animationDelay: d
          });
        }
        if (e) {
          this.vendorSet(a.style, {
            animationIterationCount: e
          });
        }
        this.vendorSet(a.style, {
          animationName: b ? "none" : this.cachedAnimationName(a)
        });
        return a;
      }
    }, {
      key: "vendorSet",
      value: function (a, b) {
        for (var c in b) {
          if (b.hasOwnProperty(c)) {
            var d = b[c];
            a["" + c] = d;
            for (var e = 0; e < this.vendors.length; e++) {
              var f = this.vendors[e];
              a["" + f + c.charAt(0).toUpperCase() + c.substr(1)] = d;
            }
          }
        }
      }
    }, {
      key: "vendorCSS",
      value: function (a, b) {
        var c = q(a);
        var d = c.getPropertyCSSValue(b);
        for (var e = 0; e < this.vendors.length; e++) {
          var f = this.vendors[e];
          d = d || c.getPropertyCSSValue("-" + f + "-" + b);
        }
        return d;
      }
    }, {
      key: "animationName",
      value: function (a) {
        var b = undefined;
        try {
          b = this.vendorCSS(a, "animation-name").cssText;
        } catch (c) {
          b = q(a).getPropertyValue("animation-name");
        }
        if (b === "none") {
          return "";
        } else {
          return b;
        }
      }
    }, {
      key: "cacheAnimationName",
      value: function (a) {
        return this.animationNameCache.set(a, this.animationName(a));
      }
    }, {
      key: "cachedAnimationName",
      value: function (a) {
        return this.animationNameCache.get(a);
      }
    }, {
      key: "scrollHandler",
      value: function () {
        this.scrolled = true;
      }
    }, {
      key: "scrollCallback",
      value: function () {
        if (this.scrolled) {
          this.scrolled = false;
          var a = [];
          for (var b = 0; b < this.boxes.length; b++) {
            var c = this.boxes[b];
            if (c) {
              if (this.isVisible(c)) {
                this.show(c);
                continue;
              }
              a.push(c);
            }
          }
          this.boxes = a;
          if (!this.boxes.length && !this.config.live) {
            this.stop();
          }
        }
      }
    }, {
      key: "offsetTop",
      value: function (a) {
        while (a.offsetTop === undefined) {
          a = a.parentNode;
        }
        var b = a.offsetTop;
        while (a.offsetParent) {
          a = a.offsetParent;
          b += a.offsetTop;
        }
        return b;
      }
    }, {
      key: "isVisible",
      value: function (a) {
        var b = a.getAttribute("data-wow-offset") || this.config.offset;
        var c = this.config.scrollContainer && this.config.scrollContainer.scrollTop || window.pageYOffset;
        var d = c + Math.min(this.element.clientHeight, k()) - b;
        var e = this.offsetTop(a);
        var f = e + a.clientHeight;
        return d >= e && f >= c;
      }
    }, {
      key: "disabled",
      value: function () {
        return !this.config.mobile && f(navigator.userAgent);
      }
    }]);
    return a;
  }();
  b.default = r;
  a.exports = b.default;
});
